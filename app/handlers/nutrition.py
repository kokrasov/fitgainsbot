from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, delete
from sqlalchemy.orm import selectinload
from aiogram.enums.parse_mode import ParseMode
from datetime import datetime, date
import json

from app.models.user import User
from app.models.nutrition import NutritionPlan, Meal, MealType, Recipe, Product, meal_recipe
from app.keyboards.inline import nutrition_menu_keyboard, back_keyboard, confirmation_keyboard, main_menu_keyboard
from app.utils.db import get_session
from app.services.nutrition_service import generate_nutrition_plan, calculate_calories_and_macros

router = Router()


class NutritionStates(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∏—Ç–∞–Ω–∏–µ–º
    """
    waiting_for_nutrition_name = State()
    waiting_for_nutrition_description = State()
    waiting_for_meal_selection = State()
    waiting_for_recipe_selection = State()
    waiting_for_manual_calories = State()
    waiting_for_manual_protein = State()
    waiting_for_manual_fat = State()
    waiting_for_manual_carbs = State()


@router.callback_query(F.data == "nutrition_menu")
async def process_nutrition_menu(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–∏—Ç–∞–Ω–∏–µ"
    """
    await callback.message.edit_text(
        "<b>üçΩÔ∏è –ü–∏—Ç–∞–Ω–∏–µ</b>\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –ø–ª–∞–Ω–æ–º –ø–∏—Ç–∞–Ω–∏—è, —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø–ª–∞–Ω—ã –∏ –∏—Å–∫–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=nutrition_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "my_nutrition_plan")
async def process_my_nutrition_plan(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è"
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(NutritionPlan)
        .where(NutritionPlan.user_id == user.id, NutritionPlan.is_active == True)
        .options(selectinload(NutritionPlan.meals).selectinload(Meal.recipes))
        .order_by(NutritionPlan.created_at.desc())
    )
    
    nutrition_plan = result.scalar_one_or_none()
    
    if not nutrition_plan:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
        await callback.message.edit_text(
            "<b>üçΩÔ∏è –ú–æ–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è</b>\n\n"
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è.\n\n"
            "–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π!",
            reply_markup=back_keyboard("nutrition_menu")
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è", callback_data="update_nutrition_plan"))
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="nutrition_menu"))
        
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    else:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
        text = f"<b>üçΩÔ∏è –ú–æ–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è: {nutrition_plan.name}</b>\n\n"
        text += f"{nutrition_plan.description or ''}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ª–æ—Ä–∏—è—Ö –∏ –º–∞–∫—Ä–æ—Å–∞—Ö
        text += f"<b>–¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        text += f"–ö–∞–ª–æ—Ä–∏–∏: {nutrition_plan.calories_target} –∫–∫–∞–ª\n"
        text += f"–ë–µ–ª–∫–∏: {nutrition_plan.protein_target} –≥\n"
        text += f"–ñ–∏—Ä—ã: {nutrition_plan.fat_target} –≥\n"
        text += f"–£–≥–ª–µ–≤–æ–¥—ã: {nutrition_plan.carbs_target} –≥\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏
        from sqlalchemy import select  # –î–æ–±–∞–≤—å—Ç–µ –≤ –∏–º–ø–æ—Ä—Ç—ã, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ
        from app.models.nutrition import Meal  # –î–æ–±–∞–≤—å—Ç–µ –≤ –∏–º–ø–æ—Ä—Ç—ã

        meals_query = select(Meal).where(Meal.nutrition_plan_id == nutrition_plan.id)
        result = await session.execute(meals_query)
        meals = result.scalars().all()

        if meals:
            text += f"<b>–ü—Ä–∏–µ–º—ã –ø–∏—â–∏:</b>\n"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –ø–æ —Ç–∏–ø—É
            meal_order = {
                MealType.BREAKFAST: 1,
                MealType.LUNCH: 2,
                MealType.DINNER: 3,
                MealType.SNACK: 4,
                MealType.PRE_WORKOUT: 5,
                MealType.POST_WORKOUT: 6
            }
            
            sorted_meals = sorted(meals, key=lambda m: meal_order.get(m.meal_type, 99))
            
            for meal in sorted_meals:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                meal_type_name = get_meal_type_name(meal.meal_type)
                
                text += f"\n<b>{meal_type_name}</b> ({meal.time or '–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}):\n"
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –≤ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏
                if meal.recipes:
                    for recipe in meal.recipes:
                        text += f"‚Ä¢ {recipe.name}\n"
                else:
                    text += "–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤\n"
        else:
            text += "–í –ø–ª–∞–Ω–µ –ø–∏—Ç–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏."
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(
            text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω",
            callback_data=f"edit_nutrition_plan_{nutrition_plan.id}"
        ))
        builder.row(InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω",
            callback_data="update_nutrition_plan"
        ))
        builder.row(InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–ª–∞–Ω",
            callback_data=f"delete_nutrition_plan_{nutrition_plan.id}"
        ))
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="nutrition_menu"))
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
    
    await callback.answer()


@router.callback_query(F.data == "update_nutrition_plan")
async def process_update_nutrition_plan(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è"
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞
    if user.gender and user.height and user.weight and user.activity_level and user.diet_type:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–ª–∏ —Ä—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", callback_data="generate_nutrition_plan"))
        builder.row(InlineKeyboardButton(text="‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="create_nutrition_manual"))
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="nutrition_menu"))
        
        await callback.message.edit_text(
            "<b>‚ûï –ù–æ–≤—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è</b>\n\n"
            "–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è?",
            reply_markup=builder.as_markup()
        )
    else:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞
        await callback.message.edit_text(
            "<b>‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –º–Ω–µ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω.",
            reply_markup=back_keyboard("nutrition_menu")
        )
    
    await callback.answer()


@router.callback_query(F.data == "generate_nutrition_plan")
async def process_generate_nutrition_plan(callback: CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(select(User).where(User.telegram_id == user_id))
    user = result.scalar_one_or_none()

    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
    if not user.height or not user.weight or not user.gender or not user.birthdate:
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–Ω–∞—á–∞–ª–∞.", show_alert=True)
        await callback.message.edit_text(
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.",
            reply_markup=profile_setup_keyboard("gender")
        )
        return

    await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è...")

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –∏ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
    calories, macros = calculate_calories_and_macros(user)

    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
    nutrition_plan = await generate_nutrition_plan(session, user, calories, macros)

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ —è–≤–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    meals_query = select(Meal).where(Meal.nutrition_plan_id == nutrition_plan.id)
    result = await session.execute(meals_query)
    meals = result.scalars().all()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º –ø–∏—Ç–∞–Ω–∏—è
    message_text = (
        f"<b>üçΩÔ∏è –í–∞—à –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è</b>\n\n"
        f"–¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n"
        f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {nutrition_plan.calories_target} –∫–∫–∞–ª\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {nutrition_plan.protein_target} –≥\n"
        f"‚Ä¢ –ñ–∏—Ä—ã: {nutrition_plan.fat_target} –≥\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {nutrition_plan.carbs_target} –≥\n\n"
        f"<b>–ü—Ä–∏–µ–º—ã –ø–∏—â–∏:</b>\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø—Ä–∏–µ–º–µ –ø–∏—â–∏
    for meal in meals:
        meal_type_name = {
            MealType.BREAKFAST: "–ó–∞–≤—Ç—Ä–∞–∫",
            MealType.LUNCH: "–û–±–µ–¥",
            MealType.DINNER: "–£–∂–∏–Ω",
            MealType.SNACK: "–ü–µ—Ä–µ–∫—É—Å",
            MealType.PRE_WORKOUT: "–ü–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π",
            MealType.POST_WORKOUT: "–ü–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
        }.get(meal.meal_type, "–ü—Ä–∏–µ–º –ø–∏—â–∏")

        message_text += f"\n<b>{meal_type_name} ({meal.time})</b>\n"

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
        recipes_query = select(Recipe).join(meal_recipe).where(meal_recipe.c.meal_id == meal.id)
        result = await session.execute(recipes_query)
        recipes = result.scalars().all()

        if recipes:
            for recipe in recipes:
                message_text += f"‚Ä¢ {recipe.name}\n"
        else:
            message_text += "‚Ä¢ –ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤\n"

    await callback.message.edit_text(
        message_text,
        reply_markup=nutrition_menu_keyboard(),
        parse_mode=ParseMode.HTML
    )


@router.callback_query(F.data == "create_nutrition_manual")
async def process_create_nutrition_manual(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é"
    """
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    await state.set_state(NutritionStates.waiting_for_nutrition_name)
    
    await callback.message.edit_text(
        "<b>‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è</b>\n\n"
        "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è:",
        reply_markup=back_keyboard("nutrition_menu")
    )
    await callback.answer()


@router.message(NutritionStates.waiting_for_nutrition_name)
async def process_nutrition_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    nutrition_name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if not nutrition_name or len(nutrition_name) > 100:
        await message.answer(
            "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(nutrition_name=nutrition_name)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
    await state.set_state(NutritionStates.waiting_for_nutrition_description)
    
    await message.answer(
        "<b>‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è</b>\n\n"
        f"–û—Ç–ª–∏—á–Ω–æ! –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞: <b>{nutrition_name}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å 'üö´', —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥):",
        reply_markup=back_keyboard("nutrition_menu")
    )


@router.message(NutritionStates.waiting_for_nutrition_description)
async def process_nutrition_description(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    nutrition_description = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "üö´", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
    if nutrition_description == "üö´":
        nutrition_description = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if nutrition_description and len(nutrition_description) > 500:
        await message.answer(
            "‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(nutrition_description=nutrition_description)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–ª–æ—Ä–∏–π
    await state.set_state(NutritionStates.waiting_for_manual_calories)
    
    await message.answer(
        "<b>‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è</b>\n\n"
        f"–ü–ª–∞–Ω: <b>{(await state.get_data())['nutrition_name']}</b>\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {nutrition_description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2500):",
        reply_markup=back_keyboard("nutrition_menu")
    )


@router.message(NutritionStates.waiting_for_manual_calories)
async def process_manual_calories(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–ª–æ—Ä–∏–π
    """
    try:
        # –ü–∞—Ä—Å–∏–º —Ü–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏
        calories = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        if calories < 1000 or calories > 5000:
            await message.answer(
                "‚ö†Ô∏è –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 1000 –¥–æ 5000. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(calories=calories)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ —Ü–µ–ª–µ–≤–æ–≥–æ –±–µ–ª–∫–∞
        await state.set_state(NutritionStates.waiting_for_manual_protein)
        
        await message.answer(
            "<b>‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è</b>\n\n"
            f"–ü–ª–∞–Ω: <b>{(await state.get_data())['nutrition_name']}</b>\n"
            f"–ö–∞–ª–æ—Ä–∏–∏: {calories} –∫–∫–∞–ª\n\n"
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–∞ –≤ –≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150):",
            reply_markup=back_keyboard("nutrition_menu")
        )
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2500):"
        )


@router.message(NutritionStates.waiting_for_manual_protein)
async def process_manual_protein(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –±–µ–ª–∫–∞
    """
    try:
        # –ü–∞—Ä—Å–∏–º —Ü–µ–ª–µ–≤–æ–π –±–µ–ª–æ–∫
        protein = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        if protein < 50 or protein > 300:
            await message.answer(
                "‚ö†Ô∏è –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 50 –¥–æ 300 –≥—Ä–∞–º–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–µ–≤–æ–π –±–µ–ª–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(protein=protein)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ —Ü–µ–ª–µ–≤—ã—Ö –∂–∏—Ä–æ–≤
        await state.set_state(NutritionStates.waiting_for_manual_fat)
        
        await message.answer(
            "<b>‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è</b>\n\n"
            f"–ü–ª–∞–Ω: <b>{(await state.get_data())['nutrition_name']}</b>\n"
            f"–ö–∞–ª–æ—Ä–∏–∏: {(await state.get_data())['calories']} –∫–∫–∞–ª\n"
            f"–ë–µ–ª–∫–∏: {protein} –≥\n\n"
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ä–æ–≤ –≤ –≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70):",
            reply_markup=back_keyboard("nutrition_menu")
        )
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–∞ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150):"
        )


@router.message(NutritionStates.waiting_for_manual_fat)
async def process_manual_fat(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–≤—ã—Ö –∂–∏—Ä–æ–≤
    """
    try:
        # –ü–∞—Ä—Å–∏–º —Ü–µ–ª–µ–≤—ã–µ –∂–∏—Ä—ã
        fat = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        if fat < 30 or fat > 150:
            await message.answer(
                "‚ö†Ô∏è –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 30 –¥–æ 150 –≥—Ä–∞–º–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–µ–≤—ã–µ –∂–∏—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(fat=fat)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ —Ü–µ–ª–µ–≤—ã—Ö —É–≥–ª–µ–≤–æ–¥–æ–≤
        await state.set_state(NutritionStates.waiting_for_manual_carbs)
        
        await message.answer(
            "<b>‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è</b>\n\n"
            f"–ü–ª–∞–Ω: <b>{(await state.get_data())['nutrition_name']}</b>\n"
            f"–ö–∞–ª–æ—Ä–∏–∏: {(await state.get_data())['calories']} –∫–∫–∞–ª\n"
            f"–ë–µ–ª–∫–∏: {(await state.get_data())['protein']} –≥\n"
            f"–ñ–∏—Ä—ã: {fat} –≥\n\n"
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ –≤ –≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 250):",
            reply_markup=back_keyboard("nutrition_menu")
        )
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ä–æ–≤ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70):"
        )


@router.message(NutritionStates.waiting_for_manual_carbs)
async def process_manual_carbs(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–≤—ã—Ö —É–≥–ª–µ–≤–æ–¥–æ–≤
    """
    try:
        # –ü–∞—Ä—Å–∏–º —Ü–µ–ª–µ–≤—ã–µ —É–≥–ª–µ–≤–æ–¥—ã
        carbs = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        if carbs < 100 or carbs > 500:
            await message.answer(
                "‚ö†Ô∏è –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 100 –¥–æ 500 –≥—Ä–∞–º–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–µ–≤—ã–µ —É–≥–ª–µ–≤–æ–¥—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(carbs=carbs)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user(session, message.from_user.id)
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
        nutrition_plan = NutritionPlan(
            user_id=user.id,
            name=data["nutrition_name"],
            description=data.get("nutrition_description"),
            calories_target=data["calories"],
            protein_target=data["protein"],
            fat_target=data["fat"],
            carbs_target=data["carbs"],
            is_active=True
        )
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è
        await session.execute(
            NutritionPlan.__table__.update()
            .where(NutritionPlan.user_id == user.id, NutritionPlan.id != nutrition_plan.id)
            .values(is_active=False)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        session.add(nutrition_plan)
        await session.commit()
        await session.refresh(nutrition_plan)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø–ª–∞–Ω–µ –ø–∏—Ç–∞–Ω–∏—è
        await message.answer(
            f"<b>‚úÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"<b>{nutrition_plan.name}</b>\n"
            f"{nutrition_plan.description or ''}\n\n"
            f"<b>–¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
            f"–ö–∞–ª–æ—Ä–∏–∏: {nutrition_plan.calories_target} –∫–∫–∞–ª\n"
            f"–ë–µ–ª–∫–∏: {nutrition_plan.protein_target} –≥\n"
            f"–ñ–∏—Ä—ã: {nutrition_plan.fat_target} –≥\n"
            f"–£–≥–ª–µ–≤–æ–¥—ã: {nutrition_plan.carbs_target} –≥\n\n"
            f"–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –∏ —Ä–µ—Ü–µ–ø—Ç—ã –≤ —Å–≤–æ–π –ø–ª–∞–Ω.",
            reply_markup=main_menu_keyboard()
        )
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 250):"
        )


@router.callback_query(F.data.startswith("view_nutrition_plan_"))
async def process_view_nutrition_plan(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    """
    # –ü–æ–ª—É—á–∞–µ–º id –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    nutrition_plan_id = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
    nutrition_plan = await session.get(
        NutritionPlan, 
        nutrition_plan_id, 
        options=[selectinload(NutritionPlan.meals).selectinload(Meal.recipes)]
    )
    
    if not nutrition_plan:
        await callback.message.edit_text(
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n"
            "–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=back_keyboard("nutrition_menu")
        )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞–Ω–µ –ø–∏—Ç–∞–Ω–∏—è
    text = f"<b>üçΩÔ∏è –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è: {nutrition_plan.name}</b>\n\n"
    text += f"{nutrition_plan.description or ''}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ª–æ—Ä–∏—è—Ö –∏ –º–∞–∫—Ä–æ—Å–∞—Ö
    text += f"<b>–¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
    text += f"–ö–∞–ª–æ—Ä–∏–∏: {nutrition_plan.calories_target} –∫–∫–∞–ª\n"
    text += f"–ë–µ–ª–∫–∏: {nutrition_plan.protein_target} –≥\n"
    text += f"–ñ–∏—Ä—ã: {nutrition_plan.fat_target} –≥\n"
    text += f"–£–≥–ª–µ–≤–æ–¥—ã: {nutrition_plan.carbs_target} –≥\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏
    meals = nutrition_plan.meals
    
    if meals:
        text += f"<b>–ü—Ä–∏–µ–º—ã –ø–∏—â–∏:</b>\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –ø–æ —Ç–∏–ø—É
        meal_order = {
            MealType.BREAKFAST: 1,
            MealType.LUNCH: 2,
            MealType.DINNER: 3,
            MealType.SNACK: 4,
            MealType.PRE_WORKOUT: 5,
            MealType.POST_WORKOUT: 6
        }
        
        sorted_meals = sorted(meals, key=lambda m: meal_order.get(m.meal_type, 99))
        
        for meal in sorted_meals:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            meal_type_name = get_meal_type_name(meal.meal_type)
            
            text += f"\n<b>{meal_type_name}</b> ({meal.time or '–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}):\n"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –≤ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏
            if meal.recipes:
                for recipe in meal.recipes:
                    text += f"‚Ä¢ {recipe.name}\n"
            else:
                text += "–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤\n"
    else:
        text += "–í –ø–ª–∞–Ω–µ –ø–∏—Ç–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏."
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω",
        callback_data=f"edit_nutrition_plan_{nutrition_plan.id}"
    ))
    builder.row(InlineKeyboardButton(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–ª–∞–Ω",
        callback_data=f"delete_nutrition_plan_{nutrition_plan.id}"
    ))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="my_nutrition_plan"))
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    
    await callback.answer()


@router.callback_query(F.data.startswith("delete_nutrition_plan_"))
async def process_delete_nutrition_plan(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    """
    # –ü–æ–ª—É—á–∞–µ–º id –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    nutrition_plan_id = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
    nutrition_plan = await session.get(NutritionPlan, nutrition_plan_id)
    
    if not nutrition_plan:
        await callback.message.edit_text(
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n"
            "–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=back_keyboard("nutrition_menu")
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    await callback.message.edit_text(
        f"<b>üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è</b>\n\n"
        f"–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –ø–ª–∞–Ω <b>{nutrition_plan.name}</b>?",
        reply_markup=confirmation_keyboard(f"delete_plan_{nutrition_plan_id}")
    )
    
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete_plan_"))
async def process_confirm_delete_plan(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    """
    # –ü–æ–ª—É—á–∞–µ–º id –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    nutrition_plan_id = int(callback.data.split("_")[-1])
    
    # –£–¥–∞–ª—è–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
    await session.execute(
        delete(NutritionPlan).where(NutritionPlan.id == nutrition_plan_id)
    )
    await session.commit()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è
    await process_my_nutrition_plan(callback, session)
    
    await callback.answer("–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω")


@router.callback_query(F.data.startswith("cancel_delete_plan_"))
async def process_cancel_delete_plan(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    """
    # –ü–æ–ª—É—á–∞–µ–º id –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    nutrition_plan_id = int(callback.data.split("_")[-1])
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    await process_view_nutrition_plan(CallbackQuery(
        id=callback.id,
        from_user=callback.from_user,
        chat_instance=callback.chat_instance,
        message=callback.message,
        data=f"view_nutrition_plan_{nutrition_plan_id}"
    ), session)
    
    await callback.answer()


@router.callback_query(F.data == "search_recipes")
async def process_search_recipes(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤"
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã (–≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é)
    result = await session.execute(select(Recipe).limit(20))
    recipes = result.scalars().all()
    
    if not recipes:
        await callback.message.edit_text(
            "<b>üîç –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤</b>\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤.",
            reply_markup=back_keyboard("nutrition_menu")
        )
    else:
        text = "<b>üîç –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤</b>\n\n"
        text += "–í—ã–±–µ—Ä–∏ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
        builder = InlineKeyboardBuilder()
        
        for recipe in recipes:
            builder.row(InlineKeyboardButton(
                text=recipe.name,
                callback_data=f"view_recipe_{recipe.id}"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="nutrition_menu"))
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
    
    await callback.answer()


@router.callback_query(F.data.startswith("view_recipe_"))
async def process_view_recipe(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º id —Ä–µ—Ü–µ–ø—Ç–∞
    recipe_id = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç
    recipe = await session.get(Recipe, recipe_id, options=[selectinload(Recipe.products)])
    
    if not recipe:
        await callback.message.edit_text(
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n"
            "–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=back_keyboard("search_recipes")
        )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ—Ü–µ–ø—Ç–µ
    text = f"<b>üçΩÔ∏è {recipe.name}</b>\n\n"

    ingredients_by_recipe = {
        "–ü—Ä–æ—Ç–µ–∏–Ω–æ–≤–∞—è –æ–≤—Å—è–Ω–∫–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏": [
            "50–≥ –æ–≤—Å—è–Ω–∫–∏",
            "200–º–ª –º–æ–ª–æ–∫–∞",
            "30–≥ –ø—Ä–æ—Ç–µ–∏–Ω–æ–≤–æ–≥–æ –ø–æ—Ä–æ—à–∫–∞",
            "1 –±–∞–Ω–∞–Ω",
            "50–≥ —è–≥–æ–¥",
            "10–≥ –º–µ–¥–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)"
        ],
        "–û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏": [
            "3 —è–π—Ü–∞",
            "100–≥ –ø–æ–º–∏–¥–æ—Ä–æ–≤",
            "50–≥ —à–ø–∏–Ω–∞—Ç–∞",
            "5–≥ –æ–ª–∏–≤–∫–æ–≤–æ–≥–æ –º–∞—Å–ª–∞"
        ],
        "–¢–≤–æ—Ä–æ–∂–Ω–∞—è –∑–∞–ø–µ–∫–∞–Ω–∫–∞": [
            "250–≥ —Ç–≤–æ—Ä–æ–≥–∞",
            "2 —è–π—Ü–∞",
            "30–≥ –æ–≤—Å—è–Ω—ã—Ö —Ö–ª–æ–ø—å–µ–≤",
            "20–≥ –º–µ–¥–∞",
            "–í–∞–Ω–∏–ª–∏–Ω –ø–æ –≤–∫—É—Å—É"
        ],
        "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å —Ä–∏—Å–æ–º –∏ –æ–≤–æ—â–∞–º–∏": [
            "150–≥ –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–∏",
            "150–≥ –æ—Ç–≤–∞—Ä–Ω–æ–≥–æ —Ä–∏—Å–∞",
            "100–≥ –±—Ä–æ–∫–∫–æ–ª–∏",
            "50–≥ –º–æ—Ä–∫–æ–≤–∏",
            "50–≥ —Ü–≤–µ—Ç–Ω–æ–π –∫–∞–ø—É—Å—Ç—ã",
            "5–≥ –æ–ª–∏–≤–∫–æ–≤–æ–≥–æ –º–∞—Å–ª–∞",
            "–°–ø–µ—Ü–∏–∏ –ø–æ –≤–∫—É—Å—É"
        ],
        "–ì—Ä–µ—á–∫–∞ —Å –≥–æ–≤—è–¥–∏–Ω–æ–π": [
            "150–≥ –Ω–µ–∂–∏—Ä–Ω–æ–π –≥–æ–≤—è–¥–∏–Ω—ã",
            "150–≥ –æ—Ç–≤–∞—Ä–Ω–æ–π –≥—Ä–µ—á–∫–∏",
            "50–≥ –ª—É–∫–∞",
            "30–≥ –º–æ—Ä–∫–æ–≤–∏",
            "5–≥ –æ–ª–∏–≤–∫–æ–≤–æ–≥–æ –º–∞—Å–ª–∞",
            "–°–ø–µ—Ü–∏–∏ –ø–æ –≤–∫—É—Å—É"
        ],
        "–õ–æ—Å–æ—Å—å —Å —Å–ª–∞–¥–∫–∏–º –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º": [
            "150–≥ —Ñ–∏–ª–µ –ª–æ—Å–æ—Å—è",
            "200–≥ —Å–ª–∞–¥–∫–æ–≥–æ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è",
            "50–≥ —Ü—É–∫–∏–Ω–∏",
            "10–≥ –æ–ª–∏–≤–∫–æ–≤–æ–≥–æ –º–∞—Å–ª–∞",
            "–õ–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫",
            "–ó–µ–ª–µ–Ω—å –∏ —Å–ø–µ—Ü–∏–∏ –ø–æ –≤–∫—É—Å—É"
        ],
        "–¢–≤–æ—Ä–æ–≥ —Å —è–≥–æ–¥–∞–º–∏ –∏ –æ—Ä–µ—Ö–∞–º–∏": [
            "200–≥ –Ω–µ–∂–∏—Ä–Ω–æ–≥–æ —Ç–≤–æ—Ä–æ–≥–∞",
            "100–≥ —Å–≤–µ–∂–∏—Ö —è–≥–æ–¥ (–∫–ª—É–±–Ω–∏–∫–∞, —á–µ—Ä–Ω–∏–∫–∞, –º–∞–ª–∏–Ω–∞)",
            "20–≥ –º–∏–Ω–¥–∞–ª—è –∏–ª–∏ –≥—Ä–µ—Ü–∫–∏—Ö –æ—Ä–µ—Ö–æ–≤",
            "10–≥ –º–µ–¥–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)"
        ],
        "–û–º–ª–µ—Ç —Å —Å—ã—Ä–æ–º": [
            "3 —è–π—Ü–∞",
            "30–≥ —Ç–≤–µ—Ä–¥–æ–≥–æ —Å—ã—Ä–∞",
            "5–≥ –æ–ª–∏–≤–∫–æ–≤–æ–≥–æ –º–∞—Å–ª–∞",
            "–ó–µ–ª–µ–Ω—å –∏ —Å–ø–µ—Ü–∏–∏ –ø–æ –≤–∫—É—Å—É"
        ],
        "–°–∞–ª–∞—Ç —Å –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–æ–π": [
            "150–≥ –æ—Ç–≤–∞—Ä–Ω–æ–π –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–∏",
            "100–≥ —Å–≤–µ–∂–∏—Ö –ø–æ–º–∏–¥–æ—Ä–æ–≤",
            "100–≥ –æ–≥—É—Ä—Ü–æ–≤",
            "50–≥ –ª–∏—Å—Ç—å–µ–≤ —Å–∞–ª–∞—Ç–∞",
            "50–≥ –±–æ–ª–≥–∞—Ä—Å–∫–æ–≥–æ –ø–µ—Ä—Ü–∞",
            "10–≥ –æ–ª–∏–≤–∫–æ–≤–æ–≥–æ –º–∞—Å–ª–∞",
            "–õ–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫ –∏ —Å–ø–µ—Ü–∏–∏ –ø–æ –≤–∫—É—Å—É"
        ],
        "–ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π –∫–æ–∫—Ç–µ–π–ª—å —Å –±–∞–Ω–∞–Ω–æ–º": [
            "30–≥ –ø—Ä–æ—Ç–µ–∏–Ω–æ–≤–æ–≥–æ –ø–æ—Ä–æ—à–∫–∞",
            "1 —Å—Ä–µ–¥–Ω–∏–π –±–∞–Ω–∞–Ω",
            "250–º–ª –º–æ–ª–æ–∫–∞ –∏–ª–∏ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–æ–ª–æ–∫–∞",
            "–õ–µ–¥ –ø–æ –∂–µ–ª–∞–Ω–∏—é"
        ],
        "–ì—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç —Å –æ—Ä–µ—Ö–∞–º–∏": [
            "200–≥ –≥—Ä–µ—á–µ—Å–∫–æ–≥–æ –π–æ–≥—É—Ä—Ç–∞",
            "20–≥ –≥—Ä–µ—Ü–∫–∏—Ö –æ—Ä–µ—Ö–æ–≤ –∏–ª–∏ –º–∏–Ω–¥–∞–ª—è",
            "10–≥ –º–µ–¥–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)",
            "–ö–æ—Ä–∏—Ü–∞ –ø–æ –≤–∫—É—Å—É"
        ],
        "–ê–≤–æ–∫–∞–¥–æ-—Ç–æ—Å—Ç": [
            "50–≥ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–≥–æ —Ö–ª–µ–±–∞ (1-2 –ª–æ–º—Ç–∏–∫–∞)",
            "1/2 —Å–ø–µ–ª–æ–≥–æ –∞–≤–æ–∫–∞–¥–æ",
            "5–≥ –æ–ª–∏–≤–∫–æ–≤–æ–≥–æ –º–∞—Å–ª–∞",
            "–°–æ–ª—å, –ø–µ—Ä–µ—Ü, –ª–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫ –ø–æ –≤–∫—É—Å—É",
            "–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–º–∏–¥–æ—Ä—ã —á–µ—Ä—Ä–∏, –º–∏–∫—Ä–æ–∑–µ–ª–µ–Ω—å, —Å–µ–º–µ–Ω–∞ –ª—å–Ω–∞ –∏–ª–∏ —á–∏–∞"
        ]
    }

    ingredients_text = "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞—Ö."
    if recipe.name in ingredients_by_recipe:
        ingredients_text = "\n".join(f"‚Ä¢ {item}" for item in ingredients_by_recipe[recipe.name])

    if recipe.description:
        text += f"{recipe.description}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
    if recipe.prep_time or recipe.cook_time:
        text += "<b>–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</b>\n"
        if recipe.prep_time:
            text += f"‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: {recipe.prep_time} –º–∏–Ω.\n"
        if recipe.cook_time:
            text += f"‚Ä¢ –ì–æ—Ç–æ–≤–∫–∞: {recipe.cook_time} –º–∏–Ω.\n"
        text += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ü–∏—è—Ö
    text += f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π:</b> {recipe.servings}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
    calories, protein, fat, carbs = await get_recipe_nutrition(session, recipe)
    
    text += "<b>–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å (–Ω–∞ –ø–æ—Ä—Ü–∏—é):</b>\n"
    text += f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {calories:.0f} –∫–∫–∞–ª\n"
    text += f"‚Ä¢ –ë–µ–ª–∫–∏: {protein:.1f} –≥\n"
    text += f"‚Ä¢ –ñ–∏—Ä—ã: {fat:.1f} –≥\n"
    text += f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs:.1f} –≥\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞—Ö
    text += "<b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n"
    
    if recipe.products:
        for assoc in recipe.recipe_product_associations:
            product = assoc.product
            amount = assoc.amount
            text += f"‚Ä¢ {product.name}: {amount} –≥\n"
    else:
        text += ingredients_text
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Å–æ–±–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
    if recipe.instructions:
        text += f"\n<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é:</b>\n{recipe.instructions}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="search_recipes"))
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    
    await callback.answer()


@router.callback_query(F.data == "nutrition_stats")
async def process_nutrition_stats(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è"
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(NutritionPlan)
        .where(NutritionPlan.user_id == user.id, NutritionPlan.is_active == True)
        .options(selectinload(NutritionPlan.meals).selectinload(Meal.recipes))
        .order_by(NutritionPlan.created_at.desc())
    )
    
    nutrition_plan = result.scalar_one_or_none()
    
    if not nutrition_plan:
        await callback.message.edit_text(
            "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è</b>\n\n"
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\n"
            "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
            reply_markup=back_keyboard("nutrition_menu")
        )
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        text = "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è</b>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è—Ö
        text += f"<b>–¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        text += f"–ö–∞–ª–æ—Ä–∏–∏: {nutrition_plan.calories_target} –∫–∫–∞–ª\n"
        text += f"–ë–µ–ª–∫–∏: {nutrition_plan.protein_target} –≥\n"
        text += f"–ñ–∏—Ä—ã: {nutrition_plan.fat_target} –≥\n"
        text += f"–£–≥–ª–µ–≤–æ–¥—ã: {nutrition_plan.carbs_target} –≥\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞)
        total_calories = 0
        total_protein = 0
        total_fat = 0
        total_carbs = 0

        if total_calories > 0:
            text += f"–ë–µ–ª–∫–∏: {protein_calories:.0f} –∫–∫–∞–ª ({100 * protein_calories / total_calories:.0f}%)\n"
            text += f"–ñ–∏—Ä—ã: {fat_calories:.0f} –∫–∫–∞–ª ({100 * fat_calories / total_calories:.0f}%)\n"
            text += f"–£–≥–ª–µ–≤–æ–¥—ã: {carbs_calories:.0f} –∫–∫–∞–ª ({100 * carbs_calories / total_calories:.0f}%)\n"
        else:
            # –ï—Å–ª–∏ –∫–∞–ª–æ—Ä–∏–π –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
            text += "–ë–µ–ª–∫–∏: 0 –∫–∫–∞–ª (0%)\n"
            text += "–ñ–∏—Ä—ã: 0 –∫–∫–∞–ª (0%)\n"
            text += "–£–≥–ª–µ–≤–æ–¥—ã: 0 –∫–∫–∞–ª (0%)\n"

        for meal in nutrition_plan.meals:
            for recipe in meal.recipes:
                calories, protein, fat, carbs = await get_recipe_nutrition(session, recipe)
                total_calories += calories
                total_protein += protein
                total_fat += fat
                total_carbs += carbs
        
        text += f"<b>–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ):</b>\n"
        text += f"–ö–∞–ª–æ—Ä–∏–∏: {total_calories:.0f} –∫–∫–∞–ª "
        text += f"({100 * total_calories / nutrition_plan.calories_target:.0f}%)\n"
        
        text += f"–ë–µ–ª–∫–∏: {total_protein:.1f} –≥ "
        text += f"({100 * total_protein / nutrition_plan.protein_target:.0f}%)\n"
        
        text += f"–ñ–∏—Ä—ã: {total_fat:.1f} –≥ "
        text += f"({100 * total_fat / nutrition_plan.fat_target:.0f}%)\n"
        
        text += f"–£–≥–ª–µ–≤–æ–¥—ã: {total_carbs:.1f} –≥ "
        text += f"({100 * total_carbs / nutrition_plan.carbs_target:.0f}%)\n\n"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –ø–æ –º–∞–∫—Ä–æ—Å–∞–º
        protein_calories = total_protein * 4  # 4 –∫–∫–∞–ª/–≥
        fat_calories = total_fat * 9  # 9 –∫–∫–∞–ª/–≥
        carbs_calories = total_carbs * 4  # 4 –∫–∫–∞–ª/–≥
        
        text += f"<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π:</b>\n"
        text += f"–ë–µ–ª–∫–∏: {protein_calories:.0f} –∫–∫–∞–ª ({100 * protein_calories / total_calories:.0f}%)\n"
        text += f"–ñ–∏—Ä—ã: {fat_calories:.0f} –∫–∫–∞–ª ({100 * fat_calories / total_calories:.0f}%)\n"
        text += f"–£–≥–ª–µ–≤–æ–¥—ã: {carbs_calories:.0f} –∫–∫–∞–ª ({100 * carbs_calories / total_calories:.0f}%)\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="nutrition_menu"))
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
    
    await callback.answer()


async def get_user(session: AsyncSession, telegram_id: int) -> User:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
    """
    result = await session.execute(select(User).where(User.telegram_id == telegram_id))
    user = result.scalar_one_or_none()
    return user


async def get_recipe_nutrition(session, recipe):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ª–æ—Ä–∏—è—Ö –∏ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞—Ö —Ä–µ—Ü–µ–ø—Ç–∞

    :param session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    :param recipe: –†–µ—Ü–µ–ø—Ç
    :return: –ö–æ—Ä—Ç–µ–∂ (–∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã)
    """
    # –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
    nutrition_by_recipe = {
        "–ü—Ä–æ—Ç–µ–∏–Ω–æ–≤–∞—è –æ–≤—Å—è–Ω–∫–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏": (350, 25, 8, 45),  # –∫–∫–∞–ª, –±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã
        "–û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏": (280, 20, 18, 5),
        "–¢–≤–æ—Ä–æ–∂–Ω–∞—è –∑–∞–ø–µ–∫–∞–Ω–∫–∞": (320, 30, 10, 25),
        "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å —Ä–∏—Å–æ–º –∏ –æ–≤–æ—â–∞–º–∏": (420, 40, 10, 35),
        "–ì—Ä–µ—á–∫–∞ —Å –≥–æ–≤—è–¥–∏–Ω–æ–π": (450, 35, 15, 40),
        "–õ–æ—Å–æ—Å—å —Å —Å–ª–∞–¥–∫–∏–º –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º": (380, 32, 18, 20),
        "–¢–≤–æ—Ä–æ–≥ —Å —è–≥–æ–¥–∞–º–∏ –∏ –æ—Ä–µ—Ö–∞–º–∏": (250, 25, 12, 15),
        "–û–º–ª–µ—Ç —Å —Å—ã—Ä–æ–º": (300, 22, 20, 3),
        "–°–∞–ª–∞—Ç —Å –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–æ–π": (220, 30, 8, 10),
        "–ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π –∫–æ–∫—Ç–µ–π–ª—å —Å –±–∞–Ω–∞–Ω–æ–º": (280, 25, 5, 30),
        "–ì—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç —Å –æ—Ä–µ—Ö–∞–º–∏": (200, 15, 10, 12),
        "–ê–≤–æ–∫–∞–¥–æ-—Ç–æ—Å—Ç": (220, 8, 15, 18)
    }

    # –ï—Å–ª–∏ —Ä–µ—Ü–µ–ø—Ç –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –Ω–µ–≥–æ
    if recipe.name in nutrition_by_recipe:
        return nutrition_by_recipe[recipe.name]

    # –ï—Å–ª–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    try:
        from sqlalchemy import select
        from app.models.nutrition import Product, recipe_product

        query = select(Product).join(recipe_product).where(recipe_product.c.recipe_id == recipe.id)
        result = await session.execute(query)
        products = result.scalars().all()

        if products:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∏–º–µ—é—â–∏–º—Å—è –ø—Ä–æ–¥—É–∫—Ç–∞–º
            total_calories = sum(product.calories for product in products) / len(products) * 100
            total_protein = sum(product.protein for product in products) / len(products)
            total_fat = sum(product.fat for product in products) / len(products)
            total_carbs = sum(product.carbs for product in products) / len(products)

            return round(total_calories), round(total_protein), round(total_fat), round(total_carbs)
    except Exception:
        pass

    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –¥—Ä—É–≥–æ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    return (300, 20, 10, 30)


def get_meal_type_name(meal_type: MealType) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    
    :param meal_type: –¢–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    :return: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    """
    meal_type_names = {
        MealType.BREAKFAST: "–ó–∞–≤—Ç—Ä–∞–∫",
        MealType.LUNCH: "–û–±–µ–¥",
        MealType.DINNER: "–£–∂–∏–Ω",
        MealType.SNACK: "–ü–µ—Ä–µ–∫—É—Å",
        MealType.PRE_WORKOUT: "–î–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
        MealType.POST_WORKOUT: "–ü–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
    }
    
    return meal_type_names.get(meal_type, str(meal_type))
