from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, delete
from datetime import datetime, date

from app.models.user import User, ActivityLevel, ExperienceLevel, DietType
from app.keyboards.inline import profile_menu_keyboard, back_keyboard, confirmation_keyboard, main_menu_keyboard, profile_setup_keyboard
from app.utils.db import get_session

router = Router()


class ProfileEditStates(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    """
    waiting_for_height = State()
    waiting_for_weight = State()
    waiting_for_target_weight = State()
    waiting_for_birthdate = State()
    waiting_for_training_days = State()


@router.callback_query(F.data == "profile_menu")
async def process_profile_menu(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
    """
    await callback.message.edit_text(
        "<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=profile_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "view_profile")
async def process_view_profile(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    text = "<b>üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    text += f"<b>–ò–º—è:</b> {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
    if user.last_name:
        text += f" {user.last_name}"
    text += "\n"
    
    if user.username:
        text += f"<b>Username:</b> @{user.username}\n"
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.gender:
        text += f"<b>–ü–æ–ª:</b> {'–ú—É–∂—Å–∫–æ–π' if user.gender == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
    
    if user.birthdate:
        text += f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {user.age} –ª–µ—Ç\n"
    
    if user.height:
        text += f"<b>–†–æ—Å—Ç:</b> {user.height} —Å–º\n"
    
    if user.weight:
        text += f"<b>–í–µ—Å:</b> {user.weight} –∫–≥\n"
    
    if user.target_weight:
        text += f"<b>–¶–µ–ª–µ–≤–æ–π –≤–µ—Å:</b> {user.target_weight} –∫–≥\n"
    
    if user.bmi:
        text += f"<b>–ò–ú–¢ (–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞):</b> {user.bmi:.1f}\n"
    
    # –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –æ–ø—ã—Ç–∞
    if user.activity_level:
        text += f"<b>–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b> {get_activity_level_name(user.activity_level)}\n"
    
    if user.experience_level:
        text += f"<b>–£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞:</b> {get_experience_level_name(user.experience_level)}\n"
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∏—Ç–∞–Ω–∏—è
    if user.diet_type:
        text += f"\n<b>–¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è:</b> {get_diet_type_name(user.diet_type)}\n"
    
    if user.allergies:
        text += f"<b>–ê–ª–ª–µ—Ä–≥–∏–∏:</b> {user.allergies}\n"
    
    if user.calories_goal:
        text += f"<b>–¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏:</b> {user.calories_goal} –∫–∫–∞–ª\n"
    
    if user.protein_goal and user.fat_goal and user.carbs_goal:
        text += f"<b>–ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã:</b> –ë {user.protein_goal}–≥ / –ñ {user.fat_goal}–≥ / –£ {user.carbs_goal}–≥\n"
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    text += f"\n<b>–î–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω–æ–º—É –∑–∞–ª—É:</b> {'–î–∞' if user.has_gym_access else '–ù–µ—Ç'}\n"
    text += f"<b>–î–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é:</b> {user.training_days_per_week}\n"
    
    # –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    text += f"\n<b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b> {'–ü—Ä–µ–º–∏—É–º' if user.is_premium else '–ë–∞–∑–æ–≤—ã–π'}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_profile"))
    builder.row(InlineKeyboardButton(text="üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª–∏", callback_data="edit_goals"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile_menu"))
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    
    await callback.answer()


@router.callback_query(F.data == "edit_profile")
async def process_edit_profile(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = "<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
    text += "–í—ã–±–µ—Ä–∏, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    builder.row(InlineKeyboardButton(text="‚ôÇÔ∏è‚ôÄÔ∏è –ü–æ–ª", callback_data="edit_gender"))
    builder.row(InlineKeyboardButton(text="üìè –†–æ—Å—Ç", callback_data="edit_height"))
    builder.row(InlineKeyboardButton(text="‚öñÔ∏è –í–µ—Å", callback_data="edit_weight"))
    builder.row(InlineKeyboardButton(text="üéØ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å", callback_data="edit_target_weight"))
    builder.row(InlineKeyboardButton(text="üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="edit_birthdate"))
    
    # –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –æ–ø—ã—Ç–∞
    builder.row(InlineKeyboardButton(text="üèÉ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="edit_activity_level"))
    builder.row(InlineKeyboardButton(text="üèãÔ∏è –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞", callback_data="edit_experience_level"))
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    builder.row(InlineKeyboardButton(text="üè¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–ª—É", callback_data="edit_gym_access"))
    builder.row(InlineKeyboardButton(text="üìÜ –î–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="edit_training_days"))
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∏—Ç–∞–Ω–∏—è
    builder.row(InlineKeyboardButton(text="üçΩÔ∏è –¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è", callback_data="edit_diet_type"))
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="view_profile"))
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    
    await callback.answer()


@router.callback_query(F.data == "edit_gender")
async def process_edit_gender(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–∞
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ôÇÔ∏è –ú—É–∂—Å–∫–æ–π", callback_data="set_gender_male"),
        InlineKeyboardButton(text="‚ôÄÔ∏è –ñ–µ–Ω—Å–∫–∏–π", callback_data="set_gender_female")
    )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="edit_profile"))
    
    await callback.message.edit_text(
        "<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:",
        reply_markup=builder.as_markup()
    )
    
    await callback.answer()


@router.callback_query(F.data.startswith("set_gender_"))
async def process_set_gender(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª
    gender = callback.data.split("_")[-1]  # male –∏–ª–∏ female
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.gender = gender
    await session.commit()
    
    await callback.message.edit_text(
        "<b>‚úÖ –ü–æ–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
        f"–¢–≤–æ–π –ø–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if gender == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}",
        reply_markup=back_keyboard("edit_profile")
    )
    
    await callback.answer()


@router.callback_query(F.data == "edit_height")
async def process_edit_height(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—Å—Ç–∞
    """
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞
    await state.set_state(ProfileEditStates.waiting_for_height)
    
    await callback.message.edit_text(
        "<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—Å—Ç–∞</b>\n\n"
        "–í–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 178):",
        reply_markup=back_keyboard("edit_profile")
    )
    
    await callback.answer()


@router.message(ProfileEditStates.waiting_for_height)
async def process_height_input(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞
    """
    try:
        # –ü–∞—Ä—Å–∏–º —Ä–æ—Å—Ç
        height = float(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ—Å—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–∑—É–º–Ω–æ–≥–æ (–æ—Ç 100 –¥–æ 250 —Å–º)
        if height < 100 or height > 250:
            await message.answer(
                "‚ö†Ô∏è –¢—ã —É–∫–∞–∑–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–æ—Ç 100 –¥–æ 250)."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user(session, message.from_user.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.height = height
        await session.commit()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        await message.answer(
            "<b>‚úÖ –†–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"–¢–≤–æ–π —Ä–æ—Å—Ç: {height} —Å–º",
            reply_markup=back_keyboard("edit_profile")
        )
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 178)."
        )


@router.callback_query(F.data == "edit_weight")
async def process_edit_weight(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ—Å–∞
    """
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤–µ—Å–∞
    await state.set_state(ProfileEditStates.waiting_for_weight)
    
    await callback.message.edit_text(
        "<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Å–∞</b>\n\n"
        "–í–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 75.5):",
        reply_markup=back_keyboard("edit_profile")
    )
    
    await callback.answer()


@router.message(ProfileEditStates.waiting_for_weight)
async def process_weight_input(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–µ—Å–∞
    """
    try:
        # –ü–∞—Ä—Å–∏–º –≤–µ—Å
        weight = float(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–∑—É–º–Ω–æ–≥–æ (–æ—Ç 30 –¥–æ 300 –∫–≥)
        if weight < 30 or weight > 300:
            await message.answer(
                "‚ö†Ô∏è –¢—ã —É–∫–∞–∑–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–æ—Ç 30 –¥–æ 300)."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user(session, message.from_user.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.weight = weight
        await session.commit()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        await message.answer(
            "<b>‚úÖ –í–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"–¢–≤–æ–π –≤–µ—Å: {weight} –∫–≥",
            reply_markup=back_keyboard("edit_profile")
        )
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 75.5)."
        )


@router.callback_query(F.data == "edit_target_weight")
async def process_edit_target_weight(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –≤–µ—Å–∞
    """
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–µ—Å–∞
    await state.set_state(ProfileEditStates.waiting_for_target_weight)
    
    await callback.message.edit_text(
        "<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–µ—Å–∞</b>\n\n"
        "–í–≤–µ–¥–∏ —Å–≤–æ–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 80):",
        reply_markup=back_keyboard("edit_profile")
    )
    
    await callback.answer()


@router.message(ProfileEditStates.waiting_for_target_weight)
async def process_target_weight_input(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–µ—Å–∞
    """
    try:
        # –ü–∞—Ä—Å–∏–º —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å
        target_weight = float(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–∑—É–º–Ω–æ–≥–æ (–æ—Ç 30 –¥–æ 300 –∫–≥)
        if target_weight < 30 or target_weight > 300:
            await message.answer(
                "‚ö†Ô∏è –¢—ã —É–∫–∞–∑–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–æ—Ç 30 –¥–æ 300)."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user(session, message.from_user.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.target_weight = target_weight
        await session.commit()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        await message.answer(
            "<b>‚úÖ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"–¢–≤–æ–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å: {target_weight} –∫–≥",
            reply_markup=back_keyboard("edit_profile")
        )
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 80)."
        )


@router.callback_query(F.data == "edit_birthdate")
async def process_edit_birthdate(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    """
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    await state.set_state(ProfileEditStates.waiting_for_birthdate)
    
    await callback.message.edit_text(
        "<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è</b>\n\n"
        "–í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.06.1990):",
        reply_markup=back_keyboard("edit_profile")
    )
    
    await callback.answer()


@router.message(ProfileEditStates.waiting_for_birthdate)
async def process_birthdate_input(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    """
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
        birthdate = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –º–µ–Ω—å—à–µ 14 –∏ –Ω–µ –±–æ–ª—å—à–µ 100 –ª–µ—Ç
        today = datetime.now().date()
        age = today.year - birthdate.year - ((today.month, today.day) < (birthdate.month, birthdate.day))
        
        if age < 14 or age > 100:
            await message.answer(
                "‚ö†Ô∏è –¢—ã —É–∫–∞–∑–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user(session, message.from_user.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.birthdate = birthdate
        await session.commit()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        await message.answer(
            "<b>‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            f"–¢–≤–æ—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthdate.strftime('%d.%m.%Y')}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç",
            reply_markup=back_keyboard("edit_profile")
        )
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.06.1990)."
        )


@router.callback_query(F.data == "edit_activity_level")
async def process_edit_activity_level(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    """
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üì± –°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏", callback_data="set_activity_sedentary"))
    builder.row(InlineKeyboardButton(text="üö∂ –õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)", callback_data="set_activity_lightly_active"))
    builder.row(InlineKeyboardButton(text="üèÉ –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (3-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)", callback_data="set_activity_moderately_active"))
    builder.row(InlineKeyboardButton(text="üèãÔ∏è –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (6-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)", callback_data="set_activity_very_active"))
    builder.row(InlineKeyboardButton(text="üèÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–æ—Ä—Ç", callback_data="set_activity_extremely_active"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="edit_profile"))
    
    await callback.message.edit_text(
        "<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
        reply_markup=builder.as_markup()
    )
    
    await callback.answer()


@router.callback_query(F.data.startswith("set_activity_"))
async def process_set_activity(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    activity_level = callback.data.split("_", 2)[-1]  # sedentary, lightly_active –∏ —Ç.–¥.
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.activity_level = ActivityLevel(activity_level)
    await session.commit()
    
    await callback.message.edit_text(
        "<b>‚úÖ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
        f"–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {get_activity_level_name(ActivityLevel(activity_level))}",
        reply_markup=back_keyboard("edit_profile")
    )
    
    await callback.answer()


@router.callback_query(F.data == "edit_experience_level")
async def process_edit_experience_level(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è –æ–ø—ã—Ç–∞
    """
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –æ–ø—ã—Ç–∞
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üî∞ –ù–æ–≤–∏—á–æ–∫ (0-6 –º–µ—Å—è—Ü–µ–≤)", callback_data="set_experience_beginner"))
    builder.row(InlineKeyboardButton(text="ü•â –°—Ä–µ–¥–Ω–∏–π (6 –º–µ—Å—è—Ü–µ–≤ - 2 –≥–æ–¥–∞)", callback_data="set_experience_intermediate"))
    builder.row(InlineKeyboardButton(text="ü•á –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (2+ –ª–µ—Ç)", callback_data="set_experience_advanced"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="edit_profile"))
    
    await callback.message.edit_text(
        "<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ–ø—ã—Ç–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö:",
        reply_markup=builder.as_markup()
    )
    
    await callback.answer()


@router.callback_query(F.data.startswith("set_experience_"))
async def process_set_experience(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –æ–ø—ã—Ç–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞
    experience_level = callback.data.split("_", 2)[-1]  # beginner, intermediate, advanced
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.experience_level = ExperienceLevel(experience_level)
    await session.commit()
    
    await callback.message.edit_text(
        "<b>‚úÖ –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
        f"–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞: {get_experience_level_name(ExperienceLevel(experience_level))}",
        reply_markup=back_keyboard("edit_profile")
    )
    
    await callback.answer()


@router.callback_query(F.data == "edit_gym_access")
async def process_edit_gym_access(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω–æ–º—É –∑–∞–ª—É
    """
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–ª—É
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="set_gym_yes"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="set_gym_no")
    )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="edit_profile"))
    
    await callback.message.edit_text(
        "<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–ª—É</b>\n\n"
        "–£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω–æ–º—É –∑–∞–ª—É?",
        reply_markup=builder.as_markup()
    )
    
    await callback.answer()


@router.callback_query(F.data.startswith("set_gym_"))
async def process_set_gym(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–ª—É
    """
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–ª—É
    has_gym = callback.data.split("_")[-1] == "yes"  # yes –∏–ª–∏ no
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–ª—É
    user.has_gym_access = has_gym
    await session.commit()
    
    await callback.message.edit_text(
        "<b>‚úÖ –î–æ—Å—Ç—É–ø –∫ –∑–∞–ª—É —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
        f"–î–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω–æ–º—É –∑–∞–ª—É: {'–î–∞' if has_gym else '–ù–µ—Ç'}",
        reply_markup=back_keyboard("edit_profile")
    )
    
    await callback.answer()


@router.callback_query(F.data == "edit_training_days")
async def process_edit_training_days(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    """
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    builder = InlineKeyboardBuilder()
    for days in [2, 3, 4, 5, 6]:
        builder.row(InlineKeyboardButton(text=f"{days} –¥–Ω—è(–µ–π) –≤ –Ω–µ–¥–µ–ª—é", callback_data=f"set_training_days_{days}"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="edit_profile"))
    
    await callback.message.edit_text(
        "<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n\n"
        "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
        reply_markup=builder.as_markup()
    )
    
    await callback.answer()


@router.callback_query(F.data.startswith("set_training_days_"))
async def process_set_training_days(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    """
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    training_days = int(callback.data.split("_")[-1])  # 2, 3, 4, 5 –∏–ª–∏ 6
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    user.training_days_per_week = training_days
    await session.commit()
    
    await callback.message.edit_text(
        "<b>‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
        f"–î–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é: {training_days}",
        reply_markup=back_keyboard("edit_profile")
    )
    
    await callback.answer()


@router.callback_query(F.data == "edit_diet_type")
async def process_edit_diet_type(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –ø–∏—Ç–∞–Ω–∏—è
    """
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–∏—Ç–∞–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üçó –û–±—ã—á–Ω–∞—è", callback_data="set_diet_regular"))
    builder.row(InlineKeyboardButton(text="ü•ó –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è", callback_data="set_diet_vegetarian"))
    builder.row(InlineKeyboardButton(text="ü•¨ –í–µ–≥–∞–Ω—Å–∫–∞—è", callback_data="set_diet_vegan"))
    builder.row(InlineKeyboardButton(text="ü•© –ö–µ—Ç–æ", callback_data="set_diet_keto"))
    builder.row(InlineKeyboardButton(text="üç≥ –ü–∞–ª–µ–æ", callback_data="set_diet_paleo"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="edit_profile"))
    
    await callback.message.edit_text(
        "<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø–∏—Ç–∞–Ω–∏—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ç–∏–ø –ø–∏—Ç–∞–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    
    await callback.answer()


@router.callback_query(F.data.startswith("set_diet_"))
async def process_set_diet(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–∏—Ç–∞–Ω–∏—è
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–∏—Ç–∞–Ω–∏—è
    diet_type = callback.data.split("_", 2)[-1]  # regular, vegetarian, vegan –∏ —Ç.–¥.
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –ø–∏—Ç–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.diet_type = DietType(diet_type)
    await session.commit()
    
    await callback.message.edit_text(
        "<b>‚úÖ –¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
        f"–¢–≤–æ–π —Ç–∏–ø –ø–∏—Ç–∞–Ω–∏—è: {get_diet_type_name(DietType(diet_type))}",
        reply_markup=back_keyboard("edit_profile")
    )
    
    await callback.answer()


@router.callback_query(F.data == "edit_goals")
async def process_edit_goals(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª–∏"
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = "<b>üéØ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–π</b>\n\n"
    
    if user.weight and user.target_weight:
        weight_diff = user.target_weight - user.weight
        text += f"–¢–µ–∫—É—â–∏–π –≤–µ—Å: {user.weight} –∫–≥\n"
        text += f"–¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {user.target_weight} –∫–≥\n"
        text += f"–†–∞–∑–Ω–∏—Ü–∞: {weight_diff:+.1f} –∫–≥\n\n"
    
    text += "–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ü–µ–ª—è–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–ª–∏
    builder.row(InlineKeyboardButton(text="‚öñÔ∏è –¶–µ–ª–µ–≤–æ–π –≤–µ—Å", callback_data="edit_target_weight"))
    builder.row(InlineKeyboardButton(text="üèãÔ∏è –î–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="edit_training_days"))
    
    # –¶–µ–ª–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é
    builder.row(InlineKeyboardButton(text="üçΩÔ∏è –¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏", callback_data="edit_calories_goal"))
    builder.row(InlineKeyboardButton(text="ü•© –ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã", callback_data="edit_macros_goals"))
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="view_profile"))
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    
    await callback.answer()


@router.callback_query(F.data == "settings")
async def process_settings(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
    text += "–í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    builder.row(InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notification_settings"))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞ (–≤ –±—É–¥—É—â–µ–º)
    # builder.row(InlineKeyboardButton(text="üåê –Ø–∑—ã–∫", callback_data="language_settings"))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
    builder.row(InlineKeyboardButton(text="üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å", callback_data="privacy_settings"))
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile_menu"))
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    
    await callback.answer()


async def get_user(session: AsyncSession, telegram_id: int) -> User:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
    """
    result = await session.execute(select(User).where(User.telegram_id == telegram_id))
    user = result.scalar_one_or_none()
    return user


def get_activity_level_name(activity_level: ActivityLevel) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    
    :param activity_level: –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    :return: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    """
    activity_level_names = {
        ActivityLevel.SEDENTARY: "–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
        ActivityLevel.LIGHTLY_ACTIVE: "–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)",
        ActivityLevel.MODERATELY_ACTIVE: "–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (3-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)",
        ActivityLevel.VERY_ACTIVE: "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (6-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)",
        ActivityLevel.EXTREMELY_ACTIVE: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–æ—Ä—Ç"
    }
    
    return activity_level_names.get(activity_level, str(activity_level))


def get_experience_level_name(experience_level: ExperienceLevel) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ–ø—ã—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    
    :param experience_level: –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞
    :return: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    """
    experience_level_names = {
        ExperienceLevel.BEGINNER: "–ù–æ–≤–∏—á–æ–∫ (0-6 –º–µ—Å—è—Ü–µ–≤)",
        ExperienceLevel.INTERMEDIATE: "–°—Ä–µ–¥–Ω–∏–π (6 –º–µ—Å—è—Ü–µ–≤ - 2 –≥–æ–¥–∞)",
        ExperienceLevel.ADVANCED: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (2+ –ª–µ—Ç)"
    }
    
    return experience_level_names.get(experience_level, str(experience_level))


def get_diet_type_name(diet_type: DietType) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    
    :param diet_type: –¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è
    :return: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    """
    diet_type_names = {
        DietType.REGULAR: "–û–±—ã—á–Ω–∞—è",
        DietType.VEGETARIAN: "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è",
        DietType.VEGAN: "–í–µ–≥–∞–Ω—Å–∫–∞—è",
        DietType.KETO: "–ö–µ—Ç–æ",
        DietType.PALEO: "–ü–∞–ª–µ–æ",
        DietType.MEDITERRANEAN: "–°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞—è"
    }
    
    return diet_type_names.get(diet_type, str(diet_type))


from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
