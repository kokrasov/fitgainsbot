from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from sqlalchemy.orm import selectinload
from datetime import datetime, date, timedelta
import json

from app.models.user import User
from app.models.workout import Workout
from app.models.progress import Progress
from app.keyboards.inline import back_keyboard, main_menu_keyboard
from app.utils.db import get_session

router = Router()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–±–µ–π–¥–∂–µ–π)
ACHIEVEMENTS = {
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    "workout_starter": {
        "name": "üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞—á–∏–Ω–∞—é—â–∏–π –∞—Ç–ª–µ—Ç",
        "description": "–ó–∞–ø–∏—Å–∞–ª –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
        "condition": lambda stats: stats["total_workouts"] >= 1
    },
    "workout_regular": {
        "name": "üèÜ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
        "description": "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –Ω–µ–¥–µ–ª—å –ø–æ–¥—Ä—è–¥",
        "condition": lambda stats: stats["consistent_weeks"] >= 2
    },
    "workout_master": {
        "name": "ü•á –ú–∞—Å—Ç–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
        "description": "–ü—Ä–æ–≤–µ–ª –±–æ–ª–µ–µ 30 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
        "condition": lambda stats: stats["total_workouts"] >= 30
    },
    "iron_will": {
        "name": "ü¶æ –ñ–µ–ª–µ–∑–Ω–∞—è –≤–æ–ª—è",
        "description": "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
        "condition": lambda stats: stats["consecutive_days"] >= 5
    },
    
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å
    "progress_tracker": {
        "name": "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
        "description": "–ó–∞–ø–∏—Å–∞–ª –ø–µ—Ä–≤—ã–µ –∑–∞–º–µ—Ä—ã",
        "condition": lambda stats: stats["progress_records"] >= 1
    },
    "consistent_progress": {
        "name": "üìà –°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
        "description": "–í–Ω–æ—Å–∏–ª –∑–∞–º–µ—Ä—ã –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞",
        "condition": lambda stats: stats["progress_weeks"] >= 4
    },
    "body_transformer": {
        "name": "üí™ –ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–ª–∞",
        "description": "–î–æ—Å—Ç–∏–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –∂–∏—Ä–∞ –∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã",
        "condition": lambda stats: stats["body_composition_improved"]
    },
    
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø–∏—Ç–∞–Ω–∏–µ
    "nutrition_planner": {
        "name": "üçΩÔ∏è –ú–∞—Å—Ç–µ—Ä –ø–∏—Ç–∞–Ω–∏—è",
        "description": "–°–æ–∑–¥–∞–ª –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è",
        "condition": lambda stats: stats["has_nutrition_plan"]
    },
    "protein_king": {
        "name": "ü•© –ö–æ—Ä–æ–ª—å –ø—Ä–æ—Ç–µ–∏–Ω–∞",
        "description": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª –≤—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–ª–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏",
        "condition": lambda stats: stats["high_protein_days"] >= 7
    }
}


@router.callback_query(F.data == "achievements")
async def process_achievements(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats = await get_user_stats(session, user)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã
    achieved = []
    not_achieved = []
    
    for achievement_id, achievement in ACHIEVEMENTS.items():
        if achievement["condition"](stats):
            achieved.append(achievement)
        else:
            not_achieved.append(achievement)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = "<b>üèÜ –¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n\n"
    
    if achieved:
        text += "<b>–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n"
        for achievement in achieved:
            text += f"‚Ä¢ {achievement['name']} - {achievement['description']}\n"
    else:
        text += "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n"
    
    text += "\n<b>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n"
    for achievement in not_achieved[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        text += f"‚Ä¢ {achievement['name']} - {achievement['description']}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    text += "\n<b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats['total_workouts']}\n"
    text += f"‚Ä¢ –î–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥: {stats['consecutive_days']}\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–º–µ—Ä–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {stats['progress_records']}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–∑–æ–≤–∞ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
    builder.row(InlineKeyboardButton(text="üéØ –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤", callback_data="challenges"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ (–≤ –±—É–¥—É—â–µ–º)
    # builder.row(InlineKeyboardButton(text="üèÖ –†–µ–π—Ç–∏–Ω–≥", callback_data="leaderboard"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    
    await callback.answer()


@router.callback_query(F.data == "challenges")
async def process_challenges(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤"
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
    challenges = [
        {
            "id": "workout_streak",
            "name": "üî• 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
            "description": "–¢—Ä–µ–Ω–∏—Ä—É–π—Å—è 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
            "reward": "–ë–µ–π–¥–∂ '–û–≥–Ω–µ–Ω–Ω–∞—è —Å–µ—Ä–∏—è'",
            "duration": "7 –¥–Ω–µ–π"
        },
        {
            "id": "protein_challenge",
            "name": "ü•© –ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π –≤—ã–∑–æ–≤",
            "description": "–ü–æ—Ç—Ä–µ–±–ª—è–π –Ω–µ –º–µ–Ω–µ–µ 2–≥ –±–µ–ª–∫–∞ –Ω–∞ –∫–≥ –≤–µ—Å–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏",
            "reward": "–ë–µ–π–¥–∂ '–ö–æ—Ä–æ–ª—å –ø—Ä–æ—Ç–µ–∏–Ω–∞'",
            "duration": "7 –¥–Ω–µ–π"
        },
        {
            "id": "weight_challenge",
            "name": "‚öñÔ∏è +2 –∫–≥ —á–∏—Å—Ç–æ–π –º–∞—Å—Å—ã",
            "description": "–ù–∞–±–µ—Ä–∏ 2 –∫–≥ –≤–µ—Å–∞ –∑–∞ 30 –¥–Ω–µ–π, —Å–æ—Ö—Ä–∞–Ω—è—è –∏–ª–∏ —É–º–µ–Ω—å—à–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞",
            "reward": "–ë–µ–π–¥–∂ '–ú–∞—Å—Ç–µ—Ä –º–∞—Å—Å—ã'",
            "duration": "30 –¥–Ω–µ–π"
        },
        {
            "id": "measurement_challenge",
            "name": "üìè –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ä—ã",
            "description": "–í–Ω–æ—Å–∏ –∑–∞–º–µ—Ä—ã –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞",
            "reward": "–ë–µ–π–¥–∂ '–ê–Ω–∞–ª–∏—Ç–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞'",
            "duration": "28 –¥–Ω–µ–π"
        }
    ]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = "<b>üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—ã–∑–æ–≤—ã</b>\n\n"
    text += "–í—ã–±–µ—Ä–∏ –≤—ã–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø—Ä–∏–Ω—è—Ç—å:\n\n"
    
    for challenge in challenges:
        text += f"<b>{challenge['name']}</b>\n"
        text += f"‚Ä¢ {challenge['description']}\n"
        text += f"‚Ä¢ –ù–∞–≥—Ä–∞–¥–∞: {challenge['reward']}\n"
        text += f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {challenge['duration']}\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
    for challenge in challenges:
        builder.row(InlineKeyboardButton(
            text=f"–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤: {challenge['name']}",
            callback_data=f"accept_challenge_{challenge['id']}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="achievements"))
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    
    await callback.answer()


@router.callback_query(F.data.startswith("accept_challenge_"))
async def process_accept_challenge(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º id —á–µ–ª–ª–µ–Ω–¥–∂–∞
    challenge_id = callback.data.split("_")[-1]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—è—Ç—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤—ã–∑–æ–≤–∞
    await callback.message.edit_text(
        f"<b>üéØ –í—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
        f"–¢—ã –ø—Ä–∏–Ω—è–ª –≤—ã–∑–æ–≤. –Ø –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —É–≤–µ–¥–æ–º–ª—é —Ç–µ–±—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö.\n\n"
        f"–£–¥–∞—á–∏! üí™",
        reply_markup=back_keyboard("achievements")
    )
    
    await callback.answer("–í—ã–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!")


async def get_user_stats(session: AsyncSession, user: User) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    
    :param session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    :param user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :return: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    stats = {
        "total_workouts": 0,
        "consecutive_days": 0,
        "consistent_weeks": 0,
        "progress_records": 0,
        "progress_weeks": 0,
        "body_composition_improved": False,
        "has_nutrition_plan": False,
        "high_protein_days": 0
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    result = await session.execute(
        select(func.count()).select_from(Workout)
        .where(Workout.user_id == user.id, Workout.completed == True)
    )
    stats["total_workouts"] = result.scalar_one() or 0
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    result = await session.execute(
        select(Workout.date).where(Workout.user_id == user.id, Workout.completed == True)
        .order_by(Workout.date.desc())
    )
    workout_dates = [record[0] for record in result.all()]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥
    consecutive_days = 0
    if workout_dates:
        today = date.today()
        consecutive_days = 0
        for i in range(30):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            check_date = today - timedelta(days=i)
            if check_date in workout_dates:
                consecutive_days += 1
            else:
                break
    
    stats["consecutive_days"] = consecutive_days
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å —Å 3+ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ –ø–æ–¥—Ä—è–¥
    consistent_weeks = 0
    for week_start in range(0, len(workout_dates), 7):
        week_dates = workout_dates[week_start:week_start+7]
        if len(week_dates) >= 3:
            consistent_weeks += 1
        else:
            break
    
    stats["consistent_weeks"] = consistent_weeks
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    result = await session.execute(
        select(func.count()).select_from(Progress)
        .where(Progress.user_id == user.id)
    )
    stats["progress_records"] = result.scalar_one() or 0
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    result = await session.execute(
        select(Progress).where(Progress.user_id == user.id)
        .order_by(Progress.date.asc())
    )
    progress_records = result.scalars().all()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ —Ç–µ–ª–∞
    if len(progress_records) >= 2:
        first_record = progress_records[0]
        last_record = progress_records[-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∂–∏—Ä–∞ –∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –≤–µ—Å–∞
        if (first_record.weight and last_record.weight and 
            first_record.body_fat_percentage and last_record.body_fat_percentage):
            
            weight_increased = last_record.weight >= first_record.weight
            fat_decreased = last_record.body_fat_percentage < first_record.body_fat_percentage
            
            if weight_increased and fat_decreased:
                stats["body_composition_improved"] = True
        
        # –ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–±—Ö–≤–∞—Ç–æ–≤ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–ª–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ —Ç–∞–ª–∏–∏
        elif (first_record.chest and last_record.chest and 
              first_record.waist and last_record.waist):
            
            chest_increased = last_record.chest > first_record.chest
            waist_stable_or_decreased = last_record.waist <= first_record.waist
            
            if chest_increased and waist_stable_or_decreased:
                stats["body_composition_improved"] = True
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å —Å –∑–∞–ø–∏—Å—è–º–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    if progress_records:
        first_date = progress_records[0].date
        last_date = progress_records[-1].date
        weeks_diff = (last_date - first_date).days // 7
        
        # –ì—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞ - –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π >= –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ–¥–µ–ª—å, —Ç–æ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å–∏ –¥–µ–ª–∞–ª–∏—Å—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ
        if stats["progress_records"] >= weeks_diff:
            stats["progress_weeks"] = weeks_diff
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    result = await session.execute(
        select(func.count()).select_from(NutritionPlan)
        .where(NutritionPlan.user_id == user.id)
    )
    nutrition_plan_count = result.scalar_one() or 0
    stats["has_nutrition_plan"] = nutrition_plan_count > 0
    
    # –í—ã—Å–æ–∫–æ–ø—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–µ –¥–Ω–∏ - –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞, –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É—á–µ—Ç –ø–æ—Ç—Ä–µ–±–ª—è–µ–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    stats["high_protein_days"] = 0
    
    return stats


async def get_user(session: AsyncSession, telegram_id: int) -> User:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
    """
    result = await session.execute(select(User).where(User.telegram_id == telegram_id))
    user = result.scalar_one_or_none()
    return user


from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from app.models.nutrition import NutritionPlan
