from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, delete, func
from sqlalchemy.orm import selectinload
from datetime import datetime, date, timedelta
import os
import json
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import io
import numpy as np

from app.models.user import User
from app.models.progress import Progress, ProgressPhoto
from app.keyboards.inline import progress_menu_keyboard, back_keyboard, confirmation_keyboard, main_menu_keyboard
from app.utils.db import get_session

router = Router()


class ProgressStates(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    """
    waiting_for_weight = State()
    waiting_for_chest = State()
    waiting_for_waist = State()
    waiting_for_hips = State()
    waiting_for_biceps_left = State()
    waiting_for_biceps_right = State()
    waiting_for_thigh_left = State()
    waiting_for_thigh_right = State()
    waiting_for_calf_left = State()
    waiting_for_calf_right = State()
    waiting_for_body_fat = State()
    waiting_for_notes = State()
    waiting_for_photo_front = State()
    waiting_for_photo_side = State()
    waiting_for_photo_back = State()


@router.callback_query(F.data == "progress_menu")
async def process_progress_menu(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≥—Ä–µ—Å—Å"
    """
    await callback.message.edit_text(
        "<b>üìä –ü—Ä–æ–≥—Ä–µ—Å—Å</b>\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –≤–Ω–æ—Å–∏—Ç—å –∑–∞–º–µ—Ä—ã –∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=progress_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "add_measurements")
async def process_add_measurements(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–Ω–µ—Å—Ç–∏ –∑–∞–º–µ—Ä—ã"
    """
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤–µ—Å–∞
    await state.set_state(ProgressStates.waiting_for_weight)
    
    await callback.message.edit_text(
        "<b>‚öñÔ∏è –í–Ω–µ—Å–µ–Ω–∏–µ –∑–∞–º–µ—Ä–æ–≤</b>\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 75.5).\n\n"
        "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–∞–∫–æ–π-–ª–∏–±–æ –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ—Ç–ø—Ä–∞–≤—å 'üö´'.",
        reply_markup=back_keyboard("progress_menu")
    )
    await callback.answer()


@router.message(ProgressStates.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–µ—Å–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å
    weight_text = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "üö´", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
    if weight_text == "üö´":
        await state.update_data(weight=None)
    else:
        try:
            # –ü–∞—Ä—Å–∏–º –≤–µ—Å
            weight = float(weight_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–∑—É–º–Ω–æ–≥–æ (–æ—Ç 30 –¥–æ 300 –∫–≥)
            if weight < 30 or weight > 300:
                await message.answer(
                    "‚ö†Ô∏è –¢—ã —É–∫–∞–∑–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–æ—Ç 30 –¥–æ 300)."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(weight=weight)
        except ValueError:
            await message.answer(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 75.5)."
            )
            return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ –æ–±—ä–µ–º–∞ –≥—Ä—É–¥–∏
    await state.set_state(ProgressStates.waiting_for_chest)
    
    await message.answer(
        "<b>‚öñÔ∏è –í–Ω–µ—Å–µ–Ω–∏–µ –∑–∞–º–µ—Ä–æ–≤ (2/10)</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –≥—Ä—É–¥–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100).\n\n"
        "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ—Ç–ø—Ä–∞–≤—å 'üö´'.",
        reply_markup=back_keyboard("progress_menu")
    )


@router.message(ProgressStates.waiting_for_chest)
async def process_chest(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–±—ä–µ–º–∞ –≥—Ä—É–¥–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–º –≥—Ä—É–¥–∏
    chest_text = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "üö´", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
    if chest_text == "üö´":
        await state.update_data(chest=None)
    else:
        try:
            # –ü–∞—Ä—Å–∏–º –æ–±—ä–µ–º –≥—Ä—É–¥–∏
            chest = float(chest_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–º –≥—Ä—É–¥–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–∑—É–º–Ω–æ–≥–æ (–æ—Ç 60 –¥–æ 150 —Å–º)
            if chest < 60 or chest > 150:
                await message.answer(
                    "‚ö†Ô∏è –¢—ã —É–∫–∞–∑–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–º –≥—Ä—É–¥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –≥—Ä—É–¥–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–æ—Ç 60 –¥–æ 150)."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–º –≥—Ä—É–¥–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(chest=chest)
        except ValueError:
            await message.answer(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –≥—Ä—É–¥–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100)."
            )
            return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ –æ–±—ä–µ–º–∞ —Ç–∞–ª–∏–∏
    await state.set_state(ProgressStates.waiting_for_waist)
    
    await message.answer(
        "<b>‚öñÔ∏è –í–Ω–µ—Å–µ–Ω–∏–µ –∑–∞–º–µ—Ä–æ–≤ (3/10)</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–±—ä–µ–º —Ç–∞–ª–∏–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 80).\n\n"
        "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ—Ç–ø—Ä–∞–≤—å 'üö´'.",
        reply_markup=back_keyboard("progress_menu")
    )


@router.message(ProgressStates.waiting_for_waist)
async def process_waist(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–±—ä–µ–º–∞ —Ç–∞–ª–∏–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–º —Ç–∞–ª–∏–∏
    waist_text = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "üö´", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
    if waist_text == "üö´":
        await state.update_data(waist=None)
    else:
        try:
            # –ü–∞—Ä—Å–∏–º –æ–±—ä–µ–º —Ç–∞–ª–∏–∏
            waist = float(waist_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–º —Ç–∞–ª–∏–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–∑—É–º–Ω–æ–≥–æ (–æ—Ç 50 –¥–æ 150 —Å–º)
            if waist < 50 or waist > 150:
                await message.answer(
                    "‚ö†Ô∏è –¢—ã —É–∫–∞–∑–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–º —Ç–∞–ª–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–±—ä–µ–º —Ç–∞–ª–∏–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–æ—Ç 50 –¥–æ 150)."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–º —Ç–∞–ª–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(waist=waist)
        except ValueError:
            await message.answer(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–±—ä–µ–º —Ç–∞–ª–∏–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 80)."
            )
            return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ –æ–±—ä–µ–º–∞ –±–µ–¥–µ—Ä
    await state.set_state(ProgressStates.waiting_for_hips)
    
    await message.answer(
        "<b>‚öñÔ∏è –í–Ω–µ—Å–µ–Ω–∏–µ –∑–∞–º–µ—Ä–æ–≤ (4/10)</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –±–µ–¥–µ—Ä –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 95).\n\n"
        "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ—Ç–ø—Ä–∞–≤—å 'üö´'.",
        reply_markup=back_keyboard("progress_menu")
    )


@router.message(ProgressStates.waiting_for_hips)
async def process_hips(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–±—ä–µ–º–∞ –±–µ–¥–µ—Ä
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–º –±–µ–¥–µ—Ä
    hips_text = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "üö´", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
    if hips_text == "üö´":
        await state.update_data(hips=None)
    else:
        try:
            # –ü–∞—Ä—Å–∏–º –æ–±—ä–µ–º –±–µ–¥–µ—Ä
            hips = float(hips_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–º –±–µ–¥–µ—Ä –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–∑—É–º–Ω–æ–≥–æ (–æ—Ç 60 –¥–æ 150 —Å–º)
            if hips < 60 or hips > 150:
                await message.answer(
                    "‚ö†Ô∏è –¢—ã —É–∫–∞–∑–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–º –±–µ–¥–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –±–µ–¥–µ—Ä –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–æ—Ç 60 –¥–æ 150)."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–º –±–µ–¥–µ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(hips=hips)
        except ValueError:
            await message.answer(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –±–µ–¥–µ—Ä –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 95)."
            )
            return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ –æ–±—ä–µ–º–∞ –ª–µ–≤–æ–≥–æ –±–∏—Ü–µ–ø—Å–∞
    await state.set_state(ProgressStates.waiting_for_biceps_left)
    
    await message.answer(
        "<b>‚öñÔ∏è –í–Ω–µ—Å–µ–Ω–∏–µ –∑–∞–º–µ—Ä–æ–≤ (5/10)</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –ª–µ–≤–æ–≥–æ –±–∏—Ü–µ–ø—Å–∞ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 35).\n\n"
        "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ—Ç–ø—Ä–∞–≤—å 'üö´'.",
        reply_markup=back_keyboard("progress_menu")
    )


@router.message(ProgressStates.waiting_for_biceps_left)
async def process_biceps_left(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–±—ä–µ–º–∞ –ª–µ–≤–æ–≥–æ –±–∏—Ü–µ–ø—Å–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–º –ª–µ–≤–æ–≥–æ –±–∏—Ü–µ–ø—Å–∞
    biceps_left_text = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "üö´", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
    if biceps_left_text == "üö´":
        await state.update_data(biceps_left=None)
    else:
        try:
            # –ü–∞—Ä—Å–∏–º –æ–±—ä–µ–º –ª–µ–≤–æ–≥–æ –±–∏—Ü–µ–ø—Å–∞
            biceps_left = float(biceps_left_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–º –ª–µ–≤–æ–≥–æ –±–∏—Ü–µ–ø—Å–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–∑—É–º–Ω–æ–≥–æ (–æ—Ç 20 –¥–æ 60 —Å–º)
            if biceps_left < 20 or biceps_left > 60:
                await message.answer(
                    "‚ö†Ô∏è –¢—ã —É–∫–∞–∑–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–º –ª–µ–≤–æ–≥–æ –±–∏—Ü–µ–ø—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–æ—Ç 20 –¥–æ 60)."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–º –ª–µ–≤–æ–≥–æ –±–∏—Ü–µ–ø—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(biceps_left=biceps_left)
        except ValueError:
            await message.answer(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –ª–µ–≤–æ–≥–æ –±–∏—Ü–µ–ø—Å–∞ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 35)."
            )
            return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ –æ–±—ä–µ–º–∞ –ø—Ä–∞–≤–æ–≥–æ –±–∏—Ü–µ–ø—Å–∞
    await state.set_state(ProgressStates.waiting_for_biceps_right)
    
    await message.answer(
        "<b>‚öñÔ∏è –í–Ω–µ—Å–µ–Ω–∏–µ –∑–∞–º–µ—Ä–æ–≤ (6/10)</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –ø—Ä–∞–≤–æ–≥–æ –±–∏—Ü–µ–ø—Å–∞ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 35).\n\n"
        "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ—Ç–ø—Ä–∞–≤—å 'üö´'.",
        reply_markup=back_keyboard("progress_menu")
    )


@router.message(ProgressStates.waiting_for_biceps_right)
async def process_biceps_right(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–±—ä–µ–º–∞ –ø—Ä–∞–≤–æ–≥–æ –±–∏—Ü–µ–ø—Å–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–º –ø—Ä–∞–≤–æ–≥–æ –±–∏—Ü–µ–ø—Å–∞
    biceps_right_text = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "üö´", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
    if biceps_right_text == "üö´":
        await state.update_data(biceps_right=None)
    else:
        try:
            # –ü–∞—Ä—Å–∏–º –æ–±—ä–µ–º –ø—Ä–∞–≤–æ–≥–æ –±–∏—Ü–µ–ø—Å–∞
            biceps_right = float(biceps_right_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–º –ø—Ä–∞–≤–æ–≥–æ –±–∏—Ü–µ–ø—Å–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–∑—É–º–Ω–æ–≥–æ (–æ—Ç 20 –¥–æ 60 —Å–º)
            if biceps_right < 20 or biceps_right > 60:
                await message.answer(
                    "‚ö†Ô∏è –¢—ã —É–∫–∞–∑–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–∞–≤–æ–≥–æ –±–∏—Ü–µ–ø—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–æ—Ç 20 –¥–æ 60)."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–º –ø—Ä–∞–≤–æ–≥–æ –±–∏—Ü–µ–ø—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(biceps_right=biceps_right)
        except ValueError:
            await message.answer(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –ø—Ä–∞–≤–æ–≥–æ –±–∏—Ü–µ–ø—Å–∞ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 35)."
            )
            return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ –æ–±—ä–µ–º–∞ –ª–µ–≤–æ–≥–æ –±–µ–¥—Ä–∞
    await state.set_state(ProgressStates.waiting_for_thigh_left)
    
    await message.answer(
        "<b>‚öñÔ∏è –í–Ω–µ—Å–µ–Ω–∏–µ –∑–∞–º–µ—Ä–æ–≤ (7/10)</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –ª–µ–≤–æ–≥–æ –±–µ–¥—Ä–∞ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 55).\n\n"
        "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ—Ç–ø—Ä–∞–≤—å 'üö´'.",
        reply_markup=back_keyboard("progress_menu")
    )


@router.message(ProgressStates.waiting_for_thigh_left)
async def process_thigh_left(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–±—ä–µ–º–∞ –ª–µ–≤–æ–≥–æ –±–µ–¥—Ä–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–º –ª–µ–≤–æ–≥–æ –±–µ–¥—Ä–∞
    thigh_left_text = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "üö´", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
    if thigh_left_text == "üö´":
        await state.update_data(thigh_left=None)
    else:
        try:
            # –ü–∞—Ä—Å–∏–º –æ–±—ä–µ–º –ª–µ–≤–æ–≥–æ –±–µ–¥—Ä–∞
            thigh_left = float(thigh_left_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–º –ª–µ–≤–æ–≥–æ –±–µ–¥—Ä–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–∑—É–º–Ω–æ–≥–æ (–æ—Ç 40 –¥–æ 80 —Å–º)
            if thigh_left < 40 or thigh_left > 80:
                await message.answer(
                    "‚ö†Ô∏è –¢—ã —É–∫–∞–∑–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–º –ª–µ–≤–æ–≥–æ –±–µ–¥—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–æ—Ç 40 –¥–æ 80)."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–º –ª–µ–≤–æ–≥–æ –±–µ–¥—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(thigh_left=thigh_left)
        except ValueError:
            await message.answer(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –ª–µ–≤–æ–≥–æ –±–µ–¥—Ä–∞ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 55)."
            )
            return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ –æ–±—ä–µ–º–∞ –ø—Ä–∞–≤–æ–≥–æ –±–µ–¥—Ä–∞
    await state.set_state(ProgressStates.waiting_for_thigh_right)
    
    await message.answer(
        "<b>‚öñÔ∏è –í–Ω–µ—Å–µ–Ω–∏–µ –∑–∞–º–µ—Ä–æ–≤ (8/10)</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –ø—Ä–∞–≤–æ–≥–æ –±–µ–¥—Ä–∞ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 55).\n\n"
        "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ—Ç–ø—Ä–∞–≤—å 'üö´'.",
        reply_markup=back_keyboard("progress_menu")
    )


@router.message(ProgressStates.waiting_for_thigh_right)
async def process_thigh_right(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–±—ä–µ–º–∞ –ø—Ä–∞–≤–æ–≥–æ –±–µ–¥—Ä–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–º –ø—Ä–∞–≤–æ–≥–æ –±–µ–¥—Ä–∞
    thigh_right_text = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "üö´", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
    if thigh_right_text == "üö´":
        await state.update_data(thigh_right=None)
    else:
        try:
            # –ü–∞—Ä—Å–∏–º –æ–±—ä–µ–º –ø—Ä–∞–≤–æ–≥–æ –±–µ–¥—Ä–∞
            thigh_right = float(thigh_right_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–º –ø—Ä–∞–≤–æ–≥–æ –±–µ–¥—Ä–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–∑—É–º–Ω–æ–≥–æ (–æ—Ç 40 –¥–æ 80 —Å–º)
            if thigh_right < 40 or thigh_right > 80:
                await message.answer(
                    "‚ö†Ô∏è –¢—ã —É–∫–∞–∑–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–∞–≤–æ–≥–æ –±–µ–¥—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–æ—Ç 40 –¥–æ 80)."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–º –ø—Ä–∞–≤–æ–≥–æ –±–µ–¥—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(thigh_right=thigh_right)
        except ValueError:
            await message.answer(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –ø—Ä–∞–≤–æ–≥–æ –±–µ–¥—Ä–∞ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 55)."
            )
            return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ –æ–±—ä–µ–º–∞ –ª–µ–≤–æ–π –∏–∫—Ä—ã
    await state.set_state(ProgressStates.waiting_for_calf_left)
    
    await message.answer(
        "<b>‚öñÔ∏è –í–Ω–µ—Å–µ–Ω–∏–µ –∑–∞–º–µ—Ä–æ–≤ (9/10)</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –ª–µ–≤–æ–π –∏–∫—Ä—ã –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 38).\n\n"
        "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ—Ç–ø—Ä–∞–≤—å 'üö´'.",
        reply_markup=back_keyboard("progress_menu")
    )


@router.message(ProgressStates.waiting_for_calf_left)
async def process_calf_left(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–±—ä–µ–º–∞ –ª–µ–≤–æ–π –∏–∫—Ä—ã
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–º –ª–µ–≤–æ–π –∏–∫—Ä—ã
    calf_left_text = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "üö´", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
    if calf_left_text == "üö´":
        await state.update_data(calf_left=None)
    else:
        try:
            # –ü–∞—Ä—Å–∏–º –æ–±—ä–µ–º –ª–µ–≤–æ–π –∏–∫—Ä—ã
            calf_left = float(calf_left_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–º –ª–µ–≤–æ–π –∏–∫—Ä—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–∑—É–º–Ω–æ–≥–æ (–æ—Ç 30 –¥–æ 50 —Å–º)
            if calf_left < 30 or calf_left > 50:
                await message.answer(
                    "‚ö†Ô∏è –¢—ã —É–∫–∞–∑–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–º –ª–µ–≤–æ–π –∏–∫—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–æ—Ç 30 –¥–æ 50)."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–º –ª–µ–≤–æ–π –∏–∫—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(calf_left=calf_left)
        except ValueError:
            await message.answer(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –ª–µ–≤–æ–π –∏–∫—Ä—ã –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 38)."
            )
            return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ –æ–±—ä–µ–º–∞ –ø—Ä–∞–≤–æ–π –∏–∫—Ä—ã
    await state.set_state(ProgressStates.waiting_for_calf_right)
    
    await message.answer(
        "<b>‚öñÔ∏è –í–Ω–µ—Å–µ–Ω–∏–µ –∑–∞–º–µ—Ä–æ–≤ (10/10)</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –ø—Ä–∞–≤–æ–π –∏–∫—Ä—ã –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 38).\n\n"
        "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ—Ç–ø—Ä–∞–≤—å 'üö´'.",
        reply_markup=back_keyboard("progress_menu")
    )


@router.message(ProgressStates.waiting_for_calf_right)
async def process_calf_right(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–±—ä–µ–º–∞ –ø—Ä–∞–≤–æ–π –∏–∫—Ä—ã
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–º –ø—Ä–∞–≤–æ–π –∏–∫—Ä—ã
    calf_right_text = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "üö´", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
    if calf_right_text == "üö´":
        await state.update_data(calf_right=None)
    else:
        try:
            # –ü–∞—Ä—Å–∏–º –æ–±—ä–µ–º –ø—Ä–∞–≤–æ–π –∏–∫—Ä—ã
            calf_right = float(calf_right_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–º –ø—Ä–∞–≤–æ–π –∏–∫—Ä—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–∑—É–º–Ω–æ–≥–æ (–æ—Ç 30 –¥–æ 50 —Å–º)
            if calf_right < 30 or calf_right > 50:
                await message.answer(
                    "‚ö†Ô∏è –¢—ã —É–∫–∞–∑–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–∞–≤–æ–π –∏–∫—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–æ—Ç 30 –¥–æ 50)."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–º –ø—Ä–∞–≤–æ–π –∏–∫—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(calf_right=calf_right)
        except ValueError:
            await message.answer(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–±—ä–µ–º –ø—Ä–∞–≤–æ–π –∏–∫—Ä—ã –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 38)."
            )
            return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    await state.set_state(ProgressStates.waiting_for_body_fat)
    
    await message.answer(
        "<b>‚öñÔ∏è –í–Ω–µ—Å–µ–Ω–∏–µ –∑–∞–º–µ—Ä–æ–≤ (–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)</b>\n\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ–Ω—Ç–µ –∂–∏—Ä–∞ –≤ —Ç–µ–ª–µ, –≤–≤–µ–¥–∏ –µ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15).\n\n"
        "–ï—Å–ª–∏ –Ω–µ—Ç —Ç–∞–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤—å 'üö´'.",
        reply_markup=back_keyboard("progress_menu")
    )


@router.message(ProgressStates.waiting_for_body_fat)
async def process_body_fat(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞
    body_fat_text = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "üö´", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
    if body_fat_text == "üö´":
        await state.update_data(body_fat=None)
    else:
        try:
            # –ü–∞—Ä—Å–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞
            body_fat = float(body_fat_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–∑—É–º–Ω–æ–≥–æ (–æ—Ç 3 –¥–æ 40%)
            if body_fat < 3 or body_fat > 40:
                await message.answer(
                    "‚ö†Ô∏è –¢—ã —É–∫–∞–∑–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ (–æ—Ç 3 –¥–æ 40)."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(body_fat=body_fat)
        except ValueError:
            await message.answer(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15)."
            )
            return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ –∑–∞–º–µ—Ç–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    await state.set_state(ProgressStates.waiting_for_notes)
    
    await message.answer(
        "<b>‚öñÔ∏è –í–Ω–µ—Å–µ–Ω–∏–µ –∑–∞–º–µ—Ä–æ–≤ (–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)</b>\n\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ –æ —Å–≤–æ–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å, –∫–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–º–µ—á–∞–µ—à—å, –∏ —Ç.–¥.\n\n"
        "–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∏, –æ—Ç–ø—Ä–∞–≤—å 'üö´'.",
        reply_markup=back_keyboard("progress_menu")
    )


@router.message(ProgressStates.waiting_for_notes)
async def process_notes(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–∞–º–µ—Ç–æ–∫
    """
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫–∏
    notes_text = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "üö´", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
    if notes_text == "üö´":
        notes = None
    else:
        notes = notes_text
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, message.from_user.id)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    progress = Progress(
        user_id=user.id,
        date=date.today(),
        weight=data.get("weight"),
        chest=data.get("chest"),
        waist=data.get("waist"),
        hips=data.get("hips"),
        biceps_left=data.get("biceps_left"),
        biceps_right=data.get("biceps_right"),
        thigh_left=data.get("thigh_left"),
        thigh_right=data.get("thigh_right"),
        calf_left=data.get("calf_left"),
        calf_right=data.get("calf_right"),
        body_fat_percentage=data.get("body_fat"),
        notes=notes
    )
    
    session.add(progress)
    await session.commit()
    await session.refresh(progress)
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    text = (
        "<b>‚úÖ –ó–∞–º–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n\n"
        "–•–æ—á–µ—à—å —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞?"
    )
    
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"add_photos_{progress.id}"))
    builder.row(InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="progress_menu"))
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await message.answer(text, reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("add_photos_"))
async def process_add_photos(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"
    """
    # –ü–æ–ª—É—á–∞–µ–º id –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    progress_id = int(callback.data.split("_")[-1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(progress_id=progress_id)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —Å–ø–µ—Ä–µ–¥–∏
    await state.set_state(ProgressStates.waiting_for_photo_front)
    
    await callback.message.edit_text(
        "<b>üì∑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–ø–µ—Ä–µ–¥–∏.\n\n"
        "–ï—Å–ª–∏ —Ç—ã –Ω–µ —Ö–æ—á–µ—à—å –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–ø–µ—Ä–µ–¥–∏, –æ—Ç–ø—Ä–∞–≤—å 'üö´'.",
        reply_markup=back_keyboard("progress_menu")
    )
    await callback.answer()


@router.message(ProgressStates.waiting_for_photo_front, F.photo)
async def process_photo_front(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —Å–ø–µ—Ä–µ–¥–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º id –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    progress_id = data["progress_id"]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs("data/photos", exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    file_name = f"data/photos/progress_{progress_id}_front_{date.today().strftime('%Y%m%d')}.jpg"
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    await photo.download(destination=file_name)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ñ–æ—Ç–æ
    photo_record = ProgressPhoto(
        progress_id=progress_id,
        photo_type="front",
        photo_path=file_name
    )
    
    session.add(photo_record)
    await session.commit()
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ —Å–±–æ–∫—É
    await state.set_state(ProgressStates.waiting_for_photo_side)
    
    await message.answer(
        "<b>üì∑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (2/3)</b>\n\n"
        "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–ø–µ—Ä–µ–¥–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
        "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–±–æ–∫—É.\n\n"
        "–ï—Å–ª–∏ —Ç—ã –Ω–µ —Ö–æ—á–µ—à—å –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–±–æ–∫—É, –æ—Ç–ø—Ä–∞–≤—å 'üö´'.",
        reply_markup=back_keyboard("progress_menu")
    )


@router.message(ProgressStates.waiting_for_photo_front, F.text == "üö´")
async def skip_photo_front(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —Å–ø–µ—Ä–µ–¥–∏
    """
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ —Å–±–æ–∫—É
    await state.set_state(ProgressStates.waiting_for_photo_side)
    
    await message.answer(
        "<b>üì∑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (2/3)</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–±–æ–∫—É.\n\n"
        "–ï—Å–ª–∏ —Ç—ã –Ω–µ —Ö–æ—á–µ—à—å –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–±–æ–∫—É, –æ—Ç–ø—Ä–∞–≤—å 'üö´'.",
        reply_markup=back_keyboard("progress_menu")
    )


@router.message(ProgressStates.waiting_for_photo_side, F.photo)
async def process_photo_side(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —Å–±–æ–∫—É
    """
    # –ü–æ–ª—É—á–∞–µ–º id –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    progress_id = data["progress_id"]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs("data/photos", exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    file_name = f"data/photos/progress_{progress_id}_side_{date.today().strftime('%Y%m%d')}.jpg"
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    await photo.download(destination=file_name)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ñ–æ—Ç–æ
    photo_record = ProgressPhoto(
        progress_id=progress_id,
        photo_type="side",
        photo_path=file_name
    )
    
    session.add(photo_record)
    await session.commit()
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ —Å–∑–∞–¥–∏
    await state.set_state(ProgressStates.waiting_for_photo_back)
    
    await message.answer(
        "<b>üì∑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (3/3)</b>\n\n"
        "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–±–æ–∫—É —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
        "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–∑–∞–¥–∏.\n\n"
        "–ï—Å–ª–∏ —Ç—ã –Ω–µ —Ö–æ—á–µ—à—å –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–∑–∞–¥–∏, –æ—Ç–ø—Ä–∞–≤—å 'üö´'.",
        reply_markup=back_keyboard("progress_menu")
    )


@router.message(ProgressStates.waiting_for_photo_side, F.text == "üö´")
async def skip_photo_side(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —Å–±–æ–∫—É
    """
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ —Å–∑–∞–¥–∏
    await state.set_state(ProgressStates.waiting_for_photo_back)
    
    await message.answer(
        "<b>üì∑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (3/3)</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–∑–∞–¥–∏.\n\n"
        "–ï—Å–ª–∏ —Ç—ã –Ω–µ —Ö–æ—á–µ—à—å –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–∑–∞–¥–∏, –æ—Ç–ø—Ä–∞–≤—å 'üö´'.",
        reply_markup=back_keyboard("progress_menu")
    )


@router.message(ProgressStates.waiting_for_photo_back, F.photo)
async def process_photo_back(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —Å–∑–∞–¥–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º id –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    progress_id = data["progress_id"]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs("data/photos", exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    file_name = f"data/photos/progress_{progress_id}_back_{date.today().strftime('%Y%m%d')}.jpg"
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    await photo.download(destination=file_name)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ñ–æ—Ç–æ
    photo_record = ProgressPhoto(
        progress_id=progress_id,
        photo_type="back",
        photo_path=file_name
    )
    
    session.add(photo_record)
    await session.commit()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    await message.answer(
        "<b>‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–º–µ—Ä–∞–º, –Ω–æ –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ.\n\n"
        "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=progress_menu_keyboard()
    )


@router.message(ProgressStates.waiting_for_photo_back, F.text == "üö´")
async def skip_photo_back(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —Å–∑–∞–¥–∏
    """
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    await message.answer(
        "<b>‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–º–µ—Ä–∞–º, –Ω–æ –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ.\n\n"
        "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=progress_menu_keyboard()
    )


@router.callback_query(F.data == "upload_photo")
async def process_upload_photo(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ"
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    result = await session.execute(
        select(Progress)
        .where(Progress.user_id == user.id, Progress.date == date.today())
    )
    
    progress = result.scalar_one_or_none()
    
    if progress:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –µ—Å—Ç—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –Ω–µ–π
        await callback.message.edit_text(
            "<b>üì∑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</b>\n\n"
            "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è. –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏?",
            reply_markup=InlineKeyboardBuilder()
            .row(InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"add_photos_{progress.id}"))
            .row(InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="progress_menu"))
            .as_markup()
        )
    else:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        progress = Progress(
            user_id=user.id,
            date=date.today()
        )
        
        session.add(progress)
        await session.commit()
        await session.refresh(progress)
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        await process_add_photos(CallbackQuery(
            id=callback.id,
            from_user=callback.from_user,
            chat_instance=callback.chat_instance,
            message=callback.message,
            data=f"add_photos_{progress.id}"
        ), state)
    
    await callback.answer()


@router.callback_query(F.data == "view_progress")
async def process_view_progress(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
    result = await session.execute(
        select(Progress)
        .where(Progress.user_id == user.id)
        .order_by(Progress.date.desc())
        .limit(10)
    )
    
    progress_records = result.scalars().all()
    
    if not progress_records:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        await callback.message.edit_text(
            "<b>üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n\n"
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.\n\n"
            "–ù–∞—á–Ω–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –¥–æ–±–∞–≤–∏–≤ –∑–∞–º–µ—Ä—ã –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!",
            reply_markup=back_keyboard("progress_menu")
        )
    else:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        builder = InlineKeyboardBuilder()
        
        for record in progress_records:
            builder.row(InlineKeyboardButton(
                text=f"üìù {record.date.strftime('%d.%m.%Y')}",
                callback_data=f"view_progress_record_{record.id}"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        builder.row(InlineKeyboardButton(text="üìà –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="progress_charts"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="progress_menu"))
        
        await callback.message.edit_text(
            "<b>üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:",
            reply_markup=builder.as_markup()
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("view_progress_record_"))
async def process_view_progress_record(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    """
    # –ü–æ–ª—É—á–∞–µ–º id –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    progress_id = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    progress = await session.get(Progress, progress_id, options=[selectinload(Progress.photos)])
    
    if not progress:
        await callback.message.edit_text(
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n"
            "–ó–∞–ø–∏—Å—å –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=back_keyboard("view_progress")
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    result = await session.execute(
        select(Progress)
        .where(Progress.user_id == progress.user_id, Progress.date < progress.date)
        .order_by(Progress.date.desc())
        .limit(1)
    )
    
    prev_progress = result.scalar_one_or_none()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    text = f"<b>üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç {progress.date.strftime('%d.%m.%Y')}</b>\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Å–µ
    if progress.weight:
        text += f"<b>–í–µ—Å:</b> {progress.weight} –∫–≥"
        if prev_progress and prev_progress.weight:
            diff = progress.weight - prev_progress.weight
            text += f" ({diff:+.1f} –∫–≥ —Å {prev_progress.date.strftime('%d.%m.%Y')})"
        text += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –∂–∏—Ä–∞
    if progress.body_fat_percentage:
        text += f"<b>–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞:</b> {progress.body_fat_percentage}%"
        if prev_progress and prev_progress.body_fat_percentage:
            diff = progress.body_fat_percentage - prev_progress.body_fat_percentage
            text += f" ({diff:+.1f}% —Å {prev_progress.date.strftime('%d.%m.%Y')})"
        text += "\n"
    
    text += "\n<b>–û–±—Ö–≤–∞—Ç—ã:</b>\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ö–≤–∞—Ç–∞—Ö
    measurements = [
        ("–ì—Ä—É–¥—å", "chest"),
        ("–¢–∞–ª–∏—è", "waist"),
        ("–ë—ë–¥—Ä–∞", "hips"),
        ("–ë–∏—Ü–µ–ø—Å (–ª–µ–≤—ã–π)", "biceps_left"),
        ("–ë–∏—Ü–µ–ø—Å (–ø—Ä–∞–≤—ã–π)", "biceps_right"),
        ("–ë–µ–¥—Ä–æ (–ª–µ–≤–æ–µ)", "thigh_left"),
        ("–ë–µ–¥—Ä–æ (–ø—Ä–∞–≤–æ–µ)", "thigh_right"),
        ("–ò–∫—Ä–∞ (–ª–µ–≤–∞—è)", "calf_left"),
        ("–ò–∫—Ä–∞ (–ø—Ä–∞–≤–∞—è)", "calf_right")
    ]
    
    for name, attr in measurements:
        value = getattr(progress, attr)
        if value:
            text += f"‚Ä¢ {name}: {value} —Å–º"
            if prev_progress and getattr(prev_progress, attr):
                diff = value - getattr(prev_progress, attr)
                text += f" ({diff:+.1f} —Å–º)"
            text += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏
    if progress.notes:
        text += f"\n<b>–ó–∞–º–µ—Ç–∫–∏:</b>\n{progress.notes}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    builder = InlineKeyboardBuilder()
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    if progress.photos:
        builder.row(InlineKeyboardButton(
            text="üì∑ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ",
            callback_data=f"view_progress_photos_{progress.id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="view_progress"))
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    
    await callback.answer()


@router.callback_query(F.data.startswith("view_progress_photos_"))
async def process_view_progress_photos(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º id –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    progress_id = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    progress = await session.get(Progress, progress_id, options=[selectinload(Progress.photos)])
    
    if not progress or not progress.photos:
        await callback.message.edit_text(
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n"
            "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=back_keyboard(f"view_progress_record_{progress_id}")
        )
        await callback.answer()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö
    await callback.message.edit_text(
        f"<b>üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç {progress.date.strftime('%d.%m.%Y')}</b>\n\n"
        f"–°–µ–π—á–∞—Å —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∑–∞–≥—Ä—É–∑–∏–ª –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å.",
        reply_markup=back_keyboard(f"view_progress_record_{progress_id}")
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    for photo in progress.photos:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if os.path.exists(photo.photo_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            caption = f"–§–æ—Ç–æ {photo.photo_type} –æ—Ç {progress.date.strftime('%d.%m.%Y')}"
            await callback.message.answer_photo(
                FSInputFile(photo.photo_path),
                caption=caption
            )
    
    await callback.answer()


@router.callback_query(F.data == "progress_charts")
async def process_progress_charts(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì—Ä–∞—Ñ–∏–∫–∏"
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30)
    result = await session.execute(
        select(Progress)
        .where(Progress.user_id == user.id)
        .order_by(Progress.date.asc())
        .limit(30)
    )
    
    progress_records = result.scalars().all()
    
    if not progress_records:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        await callback.message.edit_text(
            "<b>üìà –ì—Ä–∞—Ñ–∏–∫–∏</b>\n\n"
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤.\n\n"
            "–ù–∞—á–Ω–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –¥–æ–±–∞–≤–∏–≤ –∑–∞–º–µ—Ä—ã!",
            reply_markup=back_keyboard("progress_menu")
        )
    else:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        builder = InlineKeyboardBuilder()
        
        if any(p.weight for p in progress_records):
            builder.row(InlineKeyboardButton(text="‚öñÔ∏è –í–µ—Å", callback_data="chart_weight"))
        
        if any(p.body_fat_percentage for p in progress_records):
            builder.row(InlineKeyboardButton(text="üìâ –ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞", callback_data="chart_body_fat"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—Ö–≤–∞—Ç–æ–≤
        measurements = [
            ("–ì—Ä—É–¥—å", "chest"),
            ("–¢–∞–ª–∏—è", "waist"),
            ("–ë—ë–¥—Ä–∞", "hips"),
            ("–ë–∏—Ü–µ–ø—Å—ã", "biceps"),
            ("–ë—ë–¥—Ä–∞", "thighs"),
            ("–ò–∫—Ä—ã", "calves")
        ]
        
        for name, attr in measurements:
            if attr == "biceps" and (any(p.biceps_left for p in progress_records) or any(p.biceps_right for p in progress_records)):
                builder.row(InlineKeyboardButton(text=f"üìè {name}", callback_data=f"chart_{attr}"))
            elif attr == "thighs" and (any(p.thigh_left for p in progress_records) or any(p.thigh_right for p in progress_records)):
                builder.row(InlineKeyboardButton(text=f"üìè {name}", callback_data=f"chart_{attr}"))
            elif attr == "calves" and (any(p.calf_left for p in progress_records) or any(p.calf_right for p in progress_records)):
                builder.row(InlineKeyboardButton(text=f"üìè {name}", callback_data=f"chart_{attr}"))
            elif attr not in ["biceps", "thighs", "calves"] and any(getattr(p, attr) for p in progress_records):
                builder.row(InlineKeyboardButton(text=f"üìè {name}", callback_data=f"chart_{attr}"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="view_progress"))
        
        await callback.message.edit_text(
            "<b>üìà –ì—Ä–∞—Ñ–∏–∫–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫:",
            reply_markup=builder.as_markup()
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("chart_"))
async def process_chart(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞
    chart_type = callback.data.split("_")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30)
    result = await session.execute(
        select(Progress)
        .where(Progress.user_id == user.id)
        .order_by(Progress.date.asc())
        .limit(30)
    )
    
    progress_records = result.scalars().all()
    
    if not progress_records:
        await callback.message.edit_text(
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.",
            reply_markup=back_keyboard("progress_charts")
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if chart_type == "weight":
        # –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞
        dates = [p.date for p in progress_records if p.weight]
        values = [p.weight for p in progress_records if p.weight]
        title = "–î–∏–Ω–∞–º–∏–∫–∞ –≤–µ—Å–∞"
        ylabel = "–í–µ—Å (–∫–≥)"
    elif chart_type == "body_fat":
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞
        dates = [p.date for p in progress_records if p.body_fat_percentage]
        values = [p.body_fat_percentage for p in progress_records if p.body_fat_percentage]
        title = "–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞"
        ylabel = "–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ (%)"
    elif chart_type == "chest":
        # –ì—Ä–∞—Ñ–∏–∫ –æ–±—Ö–≤–∞—Ç–∞ –≥—Ä—É–¥–∏
        dates = [p.date for p in progress_records if p.chest]
        values = [p.chest for p in progress_records if p.chest]
        title = "–î–∏–Ω–∞–º–∏–∫–∞ –æ–±—Ö–≤–∞—Ç–∞ –≥—Ä—É–¥–∏"
        ylabel = "–û–±—Ö–≤–∞—Ç (—Å–º)"
    elif chart_type == "waist":
        # –ì—Ä–∞—Ñ–∏–∫ –æ–±—Ö–≤–∞—Ç–∞ —Ç–∞–ª–∏–∏
        dates = [p.date for p in progress_records if p.waist]
        values = [p.waist for p in progress_records if p.waist]
        title = "–î–∏–Ω–∞–º–∏–∫–∞ –æ–±—Ö–≤–∞—Ç–∞ —Ç–∞–ª–∏–∏"
        ylabel = "–û–±—Ö–≤–∞—Ç (—Å–º)"
    elif chart_type == "hips":
        # –ì—Ä–∞—Ñ–∏–∫ –æ–±—Ö–≤–∞—Ç–∞ –±–µ–¥–µ—Ä
        dates = [p.date for p in progress_records if p.hips]
        values = [p.hips for p in progress_records if p.hips]
        title = "–î–∏–Ω–∞–º–∏–∫–∞ –æ–±—Ö–≤–∞—Ç–∞ –±—ë–¥–µ—Ä"
        ylabel = "–û–±—Ö–≤–∞—Ç (—Å–º)"
    elif chart_type == "biceps":
        # –ì—Ä–∞—Ñ–∏–∫ –æ–±—Ö–≤–∞—Ç–∞ –±–∏—Ü–µ–ø—Å–æ–≤ (–ª–µ–≤—ã–π –∏ –ø—Ä–∞–≤—ã–π)
        dates_left = [p.date for p in progress_records if p.biceps_left]
        values_left = [p.biceps_left for p in progress_records if p.biceps_left]
        dates_right = [p.date for p in progress_records if p.biceps_right]
        values_right = [p.biceps_right for p in progress_records if p.biceps_right]
        title = "–î–∏–Ω–∞–º–∏–∫–∞ –æ–±—Ö–≤–∞—Ç–∞ –±–∏—Ü–µ–ø—Å–æ–≤"
        ylabel = "–û–±—Ö–≤–∞—Ç (—Å–º)"
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –¥–≤—É–º—è –ª–∏–Ω–∏—è–º–∏
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(dates_left, values_left, 'b-', label='–õ–µ–≤—ã–π')
        ax.plot(dates_right, values_right, 'r-', label='–ü—Ä–∞–≤—ã–π')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        ax.set_title(title)
        ax.set_xlabel("–î–∞—Ç–∞")
        ax.set_ylabel(ylabel)
        ax.grid(True)
        ax.legend()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –Ω–∞ –æ—Å–∏ X
        ax.xaxis.set_major_formatter(mdates.DateFormatter("%d.%m"))
        plt.xticks(rotation=45)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
        buf = io.BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        await callback.message.answer_photo(
            buf,
            caption=f"üìà {title}",
            reply_markup=back_keyboard("progress_charts")
        )
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.close()
        
        await callback.answer()
        return
    elif chart_type == "thighs":
        # –ì—Ä–∞—Ñ–∏–∫ –æ–±—Ö–≤–∞—Ç–∞ –±–µ–¥–µ—Ä (–ª–µ–≤–æ–µ –∏ –ø—Ä–∞–≤–æ–µ)
        dates_left = [p.date for p in progress_records if p.thigh_left]
        values_left = [p.thigh_left for p in progress_records if p.thigh_left]
        dates_right = [p.date for p in progress_records if p.thigh_right]
        values_right = [p.thigh_right for p in progress_records if p.thigh_right]
        title = "–î–∏–Ω–∞–º–∏–∫–∞ –æ–±—Ö–≤–∞—Ç–∞ –±—ë–¥–µ—Ä"
        ylabel = "–û–±—Ö–≤–∞—Ç (—Å–º)"
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –¥–≤—É–º—è –ª–∏–Ω–∏—è–º–∏
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(dates_left, values_left, 'b-', label='–õ–µ–≤–æ–µ')
        ax.plot(dates_right, values_right, 'r-', label='–ü—Ä–∞–≤–æ–µ')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        ax.set_title(title)
        ax.set_xlabel("–î–∞—Ç–∞")
        ax.set_ylabel(ylabel)
        ax.grid(True)
        ax.legend()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –Ω–∞ –æ—Å–∏ X
        ax.xaxis.set_major_formatter(mdates.DateFormatter("%d.%m"))
        plt.xticks(rotation=45)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
        buf = io.BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        await callback.message.answer_photo(
            buf,
            caption=f"üìà {title}",
            reply_markup=back_keyboard("progress_charts")
        )
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.close()
        
        await callback.answer()
        return
    elif chart_type == "calves":
        # –ì—Ä–∞—Ñ–∏–∫ –æ–±—Ö–≤–∞—Ç–∞ –∏–∫—Ä (–ª–µ–≤–∞—è –∏ –ø—Ä–∞–≤–∞—è)
        dates_left = [p.date for p in progress_records if p.calf_left]
        values_left = [p.calf_left for p in progress_records if p.calf_left]
        dates_right = [p.date for p in progress_records if p.calf_right]
        values_right = [p.calf_right for p in progress_records if p.calf_right]
        title = "–î–∏–Ω–∞–º–∏–∫–∞ –æ–±—Ö–≤–∞—Ç–∞ –∏–∫—Ä"
        ylabel = "–û–±—Ö–≤–∞—Ç (—Å–º)"
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –¥–≤—É–º—è –ª–∏–Ω–∏—è–º–∏
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(dates_left, values_left, 'b-', label='–õ–µ–≤–∞—è')
        ax.plot(dates_right, values_right, 'r-', label='–ü—Ä–∞–≤–∞—è')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        ax.set_title(title)
        ax.set_xlabel("–î–∞—Ç–∞")
        ax.set_ylabel(ylabel)
        ax.grid(True)
        ax.legend()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –Ω–∞ –æ—Å–∏ X
        ax.xaxis.set_major_formatter(mdates.DateFormatter("%d.%m"))
        plt.xticks(rotation=45)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
        buf = io.BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        await callback.message.answer_photo(
            buf,
            caption=f"üìà {title}",
            reply_markup=back_keyboard("progress_charts")
        )
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.close()
        
        await callback.answer()
        return
    else:
        await callback.message.edit_text(
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞.",
            reply_markup=back_keyboard("progress_charts")
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    if not dates or not values:
        await callback.message.edit_text(
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.",
            reply_markup=back_keyboard("progress_charts")
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.plot(dates, values, 'b-')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    ax.set_title(title)
    ax.set_xlabel("–î–∞—Ç–∞")
    ax.set_ylabel(ylabel)
    ax.grid(True)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –Ω–∞ –æ—Å–∏ X
    ax.xaxis.set_major_formatter(mdates.DateFormatter("%d.%m"))
    plt.xticks(rotation=45)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    await callback.message.answer_photo(
        buf,
        caption=f"üìà {title}",
        reply_markup=back_keyboard("progress_charts")
    )
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    plt.close()
    
    await callback.answer()


async def get_user(session: AsyncSession, telegram_id: int) -> User:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
    """
    result = await session.execute(select(User).where(User.telegram_id == telegram_id))
    user = result.scalar_one_or_none()
    return user
