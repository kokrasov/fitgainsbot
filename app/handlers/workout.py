from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, delete
from sqlalchemy.orm import selectinload
from datetime import datetime, timedelta, date
import json

from app.models.user import User
from app.models.workout import Workout, WorkoutPlan, Exercise, MuscleGroup, ExerciseType, Equipment
from app.keyboards.inline import workout_menu_keyboard, back_keyboard, confirmation_keyboard, main_menu_keyboard
from app.utils.db import get_session
from app.services.workout_service import generate_workout_plan, get_exercises_for_user

router = Router()


class WorkoutStates(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
    """
    waiting_for_workout_name = State()
    waiting_for_workout_description = State()
    waiting_for_workout_days = State()
    waiting_for_exercise_selection = State()
    waiting_for_workout_completion = State()
    waiting_for_workout_notes = State()


@router.callback_query(F.data == "workout_menu")
async def process_workout_menu(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
    """
    await callback.message.edit_text(
        "<b>üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏, —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø–ª–∞–Ω—ã –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=workout_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "my_workouts")
async def process_my_workouts(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(WorkoutPlan)
        .where(WorkoutPlan.user_id == user.id, WorkoutPlan.is_active == True)
        .options(selectinload(WorkoutPlan.exercises))
    )
    
    workout_plans = result.scalars().all()
    
    if not workout_plans:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        await callback.message.edit_text(
            "<b>üèãÔ∏è‚Äç‚ôÇÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>\n\n"
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n"
            "–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π!",
            reply_markup=back_keyboard("workout_menu")
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="new_workout"))
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="workout_menu"))
        
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    else:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        text = "<b>üèãÔ∏è‚Äç‚ôÇÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø–ª–∞–Ω–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        builder = InlineKeyboardBuilder()
        
        for plan in workout_plans:
            text += f"<b>{plan.name}</b>\n"
            text += f"{plan.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
            text += f"–î–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é: {plan.days_per_week}\n"
            text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {len(plan.exercises)}\n\n"
            
            builder.row(InlineKeyboardButton(
                text=f"üìù {plan.name}",
                callback_data=f"view_workout_plan_{plan.id}"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
        builder.row(InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω", callback_data="new_workout"))
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="workout_menu"))
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
    
    await callback.answer()


@router.callback_query(F.data == "new_workout")
async def process_new_workout(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞
    if user.gender and user.height and user.weight and user.activity_level and user.experience_level and user.has_gym_access is not None:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–ª–∏ —Ä—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", callback_data="generate_workout_plan"))
        builder.row(InlineKeyboardButton(text="‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="create_workout_manual"))
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="workout_menu"))
        
        await callback.message.edit_text(
            "<b>‚ûï –ù–æ–≤—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n\n"
            "–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?",
            reply_markup=builder.as_markup()
        )
    else:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞
        await callback.message.edit_text(
            "<b>‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –º–Ω–µ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω.",
            reply_markup=back_keyboard("workout_menu")
        )
    
    await callback.answer()


@router.callback_query(F.data == "generate_workout_plan")
async def process_generate_workout_plan(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞
    await callback.message.edit_text(
        "<b>ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏, —è —Å–æ–∑–¥–∞—é –¥–ª—è —Ç–µ–±—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö...",
        reply_markup=None
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    workout_plan = await generate_workout_plan(session, user)
    
    if workout_plan:
        # –ï—Å–ª–∏ –ø–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
        text = f"<b>‚úÖ –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        text += f"<b>{workout_plan.name}</b>\n"
        text += f"{workout_plan.description}\n\n"
        text += f"–î–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é: {workout_plan.days_per_week}\n"
        text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {len(workout_plan.exercises)}\n\n"
        text += f"–•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞ –∏–ª–∏ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(
            text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω",
            callback_data=f"view_workout_plan_{workout_plan.id}"
        ))
        builder.row(InlineKeyboardButton(
            text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
            callback_data=f"start_workout_{workout_plan.id}"
        ))
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="workout_menu"))
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
    else:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω
        await callback.message.edit_text(
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=back_keyboard("workout_menu")
        )
    
    await callback.answer()


@router.callback_query(F.data == "create_workout_manual")
async def process_create_workout_manual(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é"
    """
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    await state.set_state(WorkoutStates.waiting_for_workout_name)
    
    await callback.message.edit_text(
        "<b>‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n\n"
        "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:",
        reply_markup=back_keyboard("workout_menu")
    )
    await callback.answer()


@router.message(WorkoutStates.waiting_for_workout_name)
async def process_workout_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    workout_name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if not workout_name or len(workout_name) > 100:
        await message.answer(
            "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(workout_name=workout_name)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
    await state.set_state(WorkoutStates.waiting_for_workout_description)
    
    await message.answer(
        "<b>‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n\n"
        f"–û—Ç–ª–∏—á–Ω–æ! –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞: <b>{workout_name}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å 'üö´', —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥):",
        reply_markup=back_keyboard("workout_menu")
    )


@router.message(WorkoutStates.waiting_for_workout_description)
async def process_workout_description(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    workout_description = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "üö´", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
    if workout_description == "üö´":
        workout_description = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if workout_description and len(workout_description) > 500:
        await message.answer(
            "‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(workout_description=workout_description)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
    await state.set_state(WorkoutStates.waiting_for_workout_days)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
    builder = InlineKeyboardBuilder()
    for days in [2, 3, 4, 5, 6]:
        builder.row(InlineKeyboardButton(text=f"{days} –¥–Ω—è(–µ–π) –≤ –Ω–µ–¥–µ–ª—é", callback_data=f"workout_days_{days}"))
    
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="workout_menu"))
    
    await message.answer(
        "<b>‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n\n"
        f"–ü–ª–∞–Ω: <b>{(await state.get_data())['workout_name']}</b>\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {workout_description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
        reply_markup=builder.as_markup()
    )


@router.callback_query(WorkoutStates.waiting_for_workout_days, F.data.startswith("workout_days_"))
async def process_workout_days(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é
    """
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    workout_days = int(callback.data.split("_")[-1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(workout_days=workout_days)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    workout_plan = WorkoutPlan(
        user_id=user.id,
        name=data["workout_name"],
        description=data.get("workout_description"),
        days_per_week=workout_days,
        is_active=True
    )
    
    session.add(workout_plan)
    await session.commit()
    await session.refresh(workout_plan)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤—ã–±–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    await state.update_data(workout_plan_id=workout_plan.id)
    await state.set_state(WorkoutStates.waiting_for_exercise_selection)
    
    # –ü–æ–ª—É—á–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    exercises = await get_exercises_for_user(session, user)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü
    exercise_groups = {}
    for exercise in exercises:
        group = exercise.muscle_group.value
        if group not in exercise_groups:
            exercise_groups[group] = []
        exercise_groups[group].append(exercise)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø –º—ã—à—Ü
    builder = InlineKeyboardBuilder()
    for group in MuscleGroup:
        if group.value in exercise_groups:
            builder.row(InlineKeyboardButton(
                text=f"{group_emoji(group)} {group_name(group)}",
                callback_data=f"select_muscle_group_{group.value}"
            ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    builder.row(InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="finish_exercise_selection"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="workout_menu"))
    
    await callback.message.edit_text(
        "<b>‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n\n"
        f"–ü–ª–∞–Ω: <b>{data['workout_name']}</b>\n"
        f"–î–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é: {workout_days}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ç–≤–æ–µ–≥–æ –ø–ª–∞–Ω–∞:",
        reply_markup=builder.as_markup()
    )
    
    await callback.answer()


@router.callback_query(WorkoutStates.waiting_for_exercise_selection, F.data.startswith("select_muscle_group_"))
async def process_select_muscle_group(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü
    """
    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –º—ã—à—Ü
    muscle_group = callback.data.split("_")[-1]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    workout_plan_id = data["workout_plan_id"]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –º—ã—à—Ü
    result = await session.execute(
        select(Exercise).where(Exercise.muscle_group == MuscleGroup(muscle_group))
    )
    exercises = result.scalars().all()
    
    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –ø–ª–∞–Ω–∞
    workout_plan = await session.get(WorkoutPlan, workout_plan_id, options=[selectinload(WorkoutPlan.exercises)])
    selected_exercise_ids = [exercise.id for exercise in workout_plan.exercises]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    builder = InlineKeyboardBuilder()
    for exercise in exercises:
        # –û—Ç–º–µ—á–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤—ã–±—Ä–∞–Ω—ã
        prefix = "‚úÖ" if exercise.id in selected_exercise_ids else ""
        
        builder.row(InlineKeyboardButton(
            text=f"{prefix} {exercise.name} ({equipment_name(exercise.equipment)})",
            callback_data=f"toggle_exercise_{exercise.id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü"
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü", callback_data="back_to_muscle_groups"))
    
    await callback.message.edit_text(
        f"<b>‚úçÔ∏è –í—ã–±–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {group_emoji(MuscleGroup(muscle_group))} {group_name(MuscleGroup(muscle_group))}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ç–≤–æ–µ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n"
        f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ ‚úÖ, —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–≤–æ–π –ø–ª–∞–Ω.",
        reply_markup=builder.as_markup()
    )
    
    await callback.answer()


@router.callback_query(WorkoutStates.waiting_for_exercise_selection, F.data.startswith("toggle_exercise_"))
async def process_toggle_exercise(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    """
    # –ü–æ–ª—É—á–∞–µ–º id —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    exercise_id = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    workout_plan_id = data["workout_plan_id"]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    workout_plan = await session.get(WorkoutPlan, workout_plan_id, options=[selectinload(WorkoutPlan.exercises)])
    exercise = await session.get(Exercise, exercise_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    selected_exercise_ids = [ex.id for ex in workout_plan.exercises]
    
    if exercise_id in selected_exercise_ids:
        # –ï—Å–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –ø–ª–∞–Ω–∞
        workout_plan.exercises = [ex for ex in workout_plan.exercises if ex.id != exercise_id]
        await session.commit()
        await callback.answer("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ø–ª–∞–Ω–∞")
    else:
        # –ï—Å–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –ø–ª–∞–Ω
        workout_plan.exercises.append(exercise)
        await session.commit()
        await callback.answer("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–ª–∞–Ω")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –º—ã—à—Ü
    muscle_group = exercise.muscle_group.value
    
    # –ü–æ–ª—É—á–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –º—ã—à—Ü
    result = await session.execute(
        select(Exercise).where(Exercise.muscle_group == exercise.muscle_group)
    )
    exercises = result.scalars().all()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    selected_exercise_ids = [ex.id for ex in workout_plan.exercises]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    builder = InlineKeyboardBuilder()
    for ex in exercises:
        # –û—Ç–º–µ—á–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤—ã–±—Ä–∞–Ω—ã
        prefix = "‚úÖ" if ex.id in selected_exercise_ids else ""
        
        builder.row(InlineKeyboardButton(
            text=f"{prefix} {ex.name} ({equipment_name(ex.equipment)})",
            callback_data=f"toggle_exercise_{ex.id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü"
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü", callback_data="back_to_muscle_groups"))
    
    await callback.message.edit_text(
        f"<b>‚úçÔ∏è –í—ã–±–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {group_emoji(exercise.muscle_group)} {group_name(exercise.muscle_group)}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ç–≤–æ–µ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n"
        f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ ‚úÖ, —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–≤–æ–π –ø–ª–∞–Ω.",
        reply_markup=builder.as_markup()
    )


@router.callback_query(WorkoutStates.waiting_for_exercise_selection, F.data == "back_to_muscle_groups")
async def process_back_to_muscle_groups(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü"
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    workout_plan_id = data["workout_plan_id"]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    user = await get_user(session, callback.from_user.id)
    workout_plan = await session.get(WorkoutPlan, workout_plan_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    exercises = await get_exercises_for_user(session, user)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü
    exercise_groups = {}
    for exercise in exercises:
        group = exercise.muscle_group.value
        if group not in exercise_groups:
            exercise_groups[group] = []
        exercise_groups[group].append(exercise)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø –º—ã—à—Ü
    builder = InlineKeyboardBuilder()
    for group in MuscleGroup:
        if group.value in exercise_groups:
            builder.row(InlineKeyboardButton(
                text=f"{group_emoji(group)} {group_name(group)}",
                callback_data=f"select_muscle_group_{group.value}"
            ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    builder.row(InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="finish_exercise_selection"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="workout_menu"))
    
    await callback.message.edit_text(
        "<b>‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n\n"
        f"–ü–ª–∞–Ω: <b>{workout_plan.name}</b>\n"
        f"–î–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é: {workout_plan.days_per_week}\n\n"
        "–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ç–≤–æ–µ–≥–æ –ø–ª–∞–Ω–∞:",
        reply_markup=builder.as_markup()
    )
    
    await callback.answer()


@router.callback_query(WorkoutStates.waiting_for_exercise_selection, F.data == "finish_exercise_selection")
async def process_finish_exercise_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä"
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    workout_plan_id = data["workout_plan_id"]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    workout_plan = await session.get(WorkoutPlan, workout_plan_id, options=[selectinload(WorkoutPlan.exercises)])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    if not workout_plan.exercises:
        await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø–ª–∞–Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    text = "<b>‚úÖ –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
    text += f"<b>{workout_plan.name}</b>\n"
    text += f"{workout_plan.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
    text += f"–î–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é: {workout_plan.days_per_week}\n"
    text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {len(workout_plan.exercises)}\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü
    exercise_groups = {}
    for exercise in workout_plan.exercises:
        group = exercise.muscle_group.value
        if group not in exercise_groups:
            exercise_groups[group] = []
        exercise_groups[group].append(exercise)
    
    # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü
    for group in MuscleGroup:
        if group.value in exercise_groups:
            text += f"\n<b>{group_emoji(group)} {group_name(group)}:</b>\n"
            for exercise in exercise_groups[group.value]:
                text += f"‚Ä¢ {exercise.name}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
        callback_data=f"start_workout_{workout_plan.id}"
    ))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="workout_menu"))
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    
    await callback.answer("–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")


@router.callback_query(F.data.startswith("view_workout_plan_"))
async def process_view_workout_plan(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    """
    # –ü–æ–ª—É—á–∞–µ–º id –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    workout_plan_id = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    workout_plan = await session.get(WorkoutPlan, workout_plan_id, options=[selectinload(WorkoutPlan.exercises)])
    
    if not workout_plan:
        await callback.message.edit_text(
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n"
            "–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=back_keyboard("workout_menu")
        )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞–Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    text = f"<b>üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {workout_plan.name}</b>\n\n"
    text += f"{workout_plan.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
    text += f"–î–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é: {workout_plan.days_per_week}\n"
    text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {len(workout_plan.exercises)}\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü
    exercise_groups = {}
    for exercise in workout_plan.exercises:
        group = exercise.muscle_group.value
        if group not in exercise_groups:
            exercise_groups[group] = []
        exercise_groups[group].append(exercise)
    
    # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü
    for group in MuscleGroup:
        if group.value in exercise_groups:
            text += f"\n<b>{group_emoji(group)} {group_name(group)}:</b>\n"
            for exercise in exercise_groups[group.value]:
                text += f"‚Ä¢ {exercise.name}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
        callback_data=f"start_workout_{workout_plan.id}"
    ))
    builder.row(InlineKeyboardButton(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
        callback_data=f"edit_workout_plan_{workout_plan.id}"
    ))
    builder.row(InlineKeyboardButton(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
        callback_data=f"delete_workout_plan_{workout_plan.id}"
    ))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="my_workouts"))
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    
    await callback.answer()


@router.callback_query(F.data.startswith("delete_workout_plan_"))
async def process_delete_workout_plan(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    """
    # –ü–æ–ª—É—á–∞–µ–º id –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    workout_plan_id = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    workout_plan = await session.get(WorkoutPlan, workout_plan_id)
    
    if not workout_plan:
        await callback.message.edit_text(
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n"
            "–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=back_keyboard("workout_menu")
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    await callback.message.edit_text(
        f"<b>üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n\n"
        f"–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –ø–ª–∞–Ω <b>{workout_plan.name}</b>?",
        reply_markup=confirmation_keyboard(f"delete_plan_{workout_plan_id}")
    )
    
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete_plan_"))
async def process_confirm_delete_plan(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    """
    # –ü–æ–ª—É—á–∞–µ–º id –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    workout_plan_id = int(callback.data.split("_")[-1])
    
    # –£–¥–∞–ª—è–µ–º –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    await session.execute(
        delete(WorkoutPlan).where(WorkoutPlan.id == workout_plan_id)
    )
    await session.commit()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–ª–∞–Ω–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    await process_my_workouts(callback, session)
    
    await callback.answer("–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É–¥–∞–ª–µ–Ω")


@router.callback_query(F.data.startswith("cancel_delete_plan_"))
async def process_cancel_delete_plan(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    """
    # –ü–æ–ª—É—á–∞–µ–º id –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    workout_plan_id = int(callback.data.split("_")[-1])
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    await process_view_workout_plan(CallbackQuery(
        id=callback.id,
        from_user=callback.from_user,
        chat_instance=callback.chat_instance,
        message=callback.message,
        data=f"view_workout_plan_{workout_plan_id}"
    ), session)
    
    await callback.answer()


@router.callback_query(F.data.startswith("start_workout_"))
async def process_start_workout(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º id –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    workout_plan_id = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    workout_plan = await session.get(WorkoutPlan, workout_plan_id, options=[selectinload(WorkoutPlan.exercises)])
    
    if not workout_plan or not workout_plan.exercises:
        await callback.message.edit_text(
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n"
            "–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.",
            reply_markup=back_keyboard("workout_menu")
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
    user = await get_user(session, callback.from_user.id)
    workout = Workout(
        user_id=user.id,
        workout_plan_id=workout_plan.id,
        date=date.today(),
        completed=False
    )
    
    session.add(workout)
    await session.commit()
    await session.refresh(workout)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(workout_id=workout.id)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    await display_workout_exercise(callback.message, workout_plan, 0, workout.id, session)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    await state.set_state(WorkoutStates.waiting_for_workout_completion)
    
    await callback.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞—Ç–∞!")


async def display_workout_exercise(message, workout_plan, exercise_index, workout_id, session):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    exercises = workout_plan.exercises
    
    if not exercises or exercise_index >= len(exercises):
        # –ï—Å–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ –∏–Ω–¥–µ–∫—Å –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Å–ø–∏—Å–∫–∞
        await message.edit_text(
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n"
            "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=back_keyboard("workout_menu")
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    exercise = exercises[exercise_index]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–∏
    text = f"<b>üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {workout_plan.name}</b>\n"
    text += f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {exercise_index + 1} –∏–∑ {len(exercises)}\n\n"
    text += f"<b>{exercise.name}</b>\n"
    text += f"–ì—Ä—É–ø–ø–∞ –º—ã—à—Ü: {group_emoji(exercise.muscle_group)} {group_name(exercise.muscle_group)}\n"
    text += f"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {equipment_name(exercise.equipment)}\n\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥—Ö–æ–¥–∞–º –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º
    text += f"<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
    text += f"–ü–æ–¥—Ö–æ–¥—ã: 3-4\n"
    text += f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: 8-12\n"
    text += f"–û—Ç–¥—ã—Ö –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏: 1-2 –º–∏–Ω—É—Ç—ã\n\n"
    
    if exercise.instructions:
        text += f"<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n{exercise.instructions}\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏
    builder = InlineKeyboardBuilder()
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if exercise_index > 0:
        builder.row(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ",
            callback_data=f"prev_exercise_{workout_id}_{exercise_index}"
        ))
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
    if exercise_index < len(exercises) - 1:
        builder.row(InlineKeyboardButton(
            text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ",
            callback_data=f"next_exercise_{workout_id}_{exercise_index}"
        ))
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"
        builder.row(InlineKeyboardButton(
            text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
            callback_data=f"complete_workout_{workout_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    if exercise.video_url:
        builder.row(InlineKeyboardButton(
            text="üìπ –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ",
            url=exercise.video_url
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    builder.row(InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
        callback_data=f"cancel_workout_{workout_id}"
    ))
    
    await message.edit_text(text, reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("next_exercise_"))
async def process_next_exercise(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
    """
    # –ü–æ–ª—É—á–∞–µ–º id —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    parts = callback.data.split("_")
    workout_id = int(parts[2])
    current_index = int(parts[3])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    workout = await session.get(Workout, workout_id)
    workout_plan = await session.get(WorkoutPlan, workout.workout_plan_id, options=[selectinload(WorkoutPlan.exercises)])
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    await display_workout_exercise(callback.message, workout_plan, current_index + 1, workout_id, session)
    
    await callback.answer()


@router.callback_query(F.data.startswith("prev_exercise_"))
async def process_prev_exercise(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
    """
    # –ü–æ–ª—É—á–∞–µ–º id —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    parts = callback.data.split("_")
    workout_id = int(parts[2])
    current_index = int(parts[3])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    workout = await session.get(Workout, workout_id)
    workout_plan = await session.get(WorkoutPlan, workout.workout_plan_id, options=[selectinload(WorkoutPlan.exercises)])
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    await display_workout_exercise(callback.message, workout_plan, current_index - 1, workout_id, session)
    
    await callback.answer()


@router.callback_query(F.data.startswith("complete_workout_"))
async def process_complete_workout(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º id —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    workout_id = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    workout = await session.get(Workout, workout_id)
    
    if not workout:
        await callback.message.edit_text(
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n"
            "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=back_keyboard("workout_menu")
        )
        await callback.answer()
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∑–∞–º–µ—Ç–æ–∫ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
    await state.update_data(workout_id=workout_id)
    await state.set_state(WorkoutStates.waiting_for_workout_notes)
    
    await callback.message.edit_text(
        "<b>‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤–æ–≤–∞–ª, "
        "–∫–∞–∫–∏–µ –≤–µ—Å–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª, –∫–∞–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –±—ã–ª–∏ —Å–ª–æ–∂–Ω—ã–º–∏ –∏ —Ç.–¥.).\n\n"
        "–í–≤–µ–¥–∏ —Å–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å 'üö´', —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥:",
        reply_markup=None
    )
    
    await callback.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


@router.message(WorkoutStates.waiting_for_workout_notes)
async def process_workout_notes(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–∞–º–µ—Ç–æ–∫ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
    """
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫–∏
    notes = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "üö´", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
    if notes == "üö´":
        notes = None
    
    # –ü–æ–ª—É—á–∞–µ–º id —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    workout_id = data["workout_id"]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    workout = await session.get(Workout, workout_id)
    
    if not workout:
        await message.answer(
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n"
            "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=back_keyboard("workout_menu")
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    workout.completed = True
    workout.notes = notes
    workout.duration = 60  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
    
    await session.commit()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    await message.answer(
        "<b>üéâ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>\n\n"
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —Ö–æ—Ä–æ—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!\n\n"
        "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=main_menu_keyboard()
    )


@router.callback_query(F.data.startswith("cancel_workout_"))
async def process_cancel_workout(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º id —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    workout_id = int(callback.data.split("_")[-1])
    
    # –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await session.execute(
        delete(Workout).where(Workout.id == workout_id)
    )
    await session.commit()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    await process_workout_menu(callback, session)
    
    await callback.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


@router.callback_query(F.data == "workout_history")
async def process_workout_history(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
    result = await session.execute(
        select(Workout)
        .where(Workout.user_id == user.id, Workout.completed == True)
        .order_by(Workout.date.desc())
        .limit(10)
    )
    
    workouts = result.scalars().all()
    
    if not workouts:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        await callback.message.edit_text(
            "<b>üìù –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n\n"
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.",
            reply_markup=back_keyboard("workout_menu")
        )
    else:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        text = "<b>üìù –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        builder = InlineKeyboardBuilder()
        
        for workout in workouts:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            if workout.workout_plan_id:
                workout_plan = await session.get(WorkoutPlan, workout.workout_plan_id)
                plan_name = workout_plan.name if workout_plan else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω"
            else:
                plan_name = "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            formatted_date = workout.date.strftime("%d.%m.%Y")
            
            text += f"<b>{formatted_date}</b> - {plan_name}\n"
            
            builder.row(InlineKeyboardButton(
                text=f"üìù {formatted_date} - {plan_name}",
                callback_data=f"view_workout_{workout.id}"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="workout_menu"))
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
    
    await callback.answer()


@router.callback_query(F.data.startswith("view_workout_"))
async def process_view_workout(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º id —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    workout_id = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    workout = await session.get(Workout, workout_id)
    
    if not workout:
        await callback.message.edit_text(
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n"
            "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=back_keyboard("workout_menu")
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    workout_plan = await session.get(WorkoutPlan, workout.workout_plan_id) if workout.workout_plan_id else None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
    text = f"<b>üìù –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç {workout.date.strftime('%d.%m.%Y')}</b>\n\n"
    
    if workout_plan:
        text += f"–ü–ª–∞–Ω: <b>{workout_plan.name}</b>\n"
    else:
        text += f"–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞\n"
    
    text += f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {workout.duration or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} –º–∏–Ω—É—Ç\n"
    text += f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞' if workout.completed else '‚ùå –ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'}\n\n"
    
    if workout.exercises_data:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö
        exercises_data = json.loads(workout.exercises_data)
        text += f"<b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:</b>\n"
        
        for exercise_data in exercises_data:
            text += f"‚Ä¢ {exercise_data['name']}: {exercise_data['sets']} –ø–æ–¥—Ö–æ–¥–æ–≤ x {exercise_data['reps']} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
    
    if workout.notes:
        text += f"\n<b>–ó–∞–º–µ—Ç–∫–∏:</b>\n{workout.notes}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", –µ—Å–ª–∏ –µ—Å—Ç—å –ø–ª–∞–Ω
    if workout.workout_plan_id:
        builder.row(InlineKeyboardButton(
            text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
            callback_data=f"start_workout_{workout.workout_plan_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="workout_history"))
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    
    await callback.answer()


@router.callback_query(F.data == "workout_stats")
async def process_workout_stats(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(Workout)
        .where(Workout.user_id == user.id, Workout.completed == True)
    )
    
    workouts = result.scalars().all()
    
    if not workouts:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        await callback.message.edit_text(
            "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n\n"
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\n"
            "–ù–∞—á–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å!",
            reply_markup=back_keyboard("workout_menu")
        )
    else:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        total_workouts = len(workouts)
        total_duration = sum(workout.duration or 0 for workout in workouts)
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –∏ 30 –¥–Ω–µ–π
        today = date.today()
        last_week = today - timedelta(days=7)
        last_month = today - timedelta(days=30)
        
        workouts_last_week = len([w for w in workouts if w.date >= last_week])
        workouts_last_month = len([w for w in workouts if w.date >= last_month])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        text = "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n\n"
        text += f"–í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {total_workouts}\n"
        text += f"–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration} –º–∏–Ω—É—Ç\n\n"
        text += f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: {workouts_last_week}\n"
        text += f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: {workouts_last_month}\n\n"
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü
        muscle_groups = {}
        
        for workout in workouts:
            if workout.workout_plan_id:
                workout_plan = await session.get(WorkoutPlan, workout.workout_plan_id, options=[selectinload(WorkoutPlan.exercises)])
                if workout_plan:
                    for exercise in workout_plan.exercises:
                        group = exercise.muscle_group.value
                        muscle_groups[group] = muscle_groups.get(group, 0) + 1
        
        if muscle_groups:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –º—ã—à—Ü –ø–æ —á–∞—Å—Ç–æ—Ç–µ
            sorted_groups = sorted(muscle_groups.items(), key=lambda x: x[1], reverse=True)
            
            text += f"<b>–ù–∞–∏–±–æ–ª–µ–µ —Ç—Ä–µ–Ω–∏—Ä—É–µ–º—ã–µ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü:</b>\n"
            for group, count in sorted_groups[:3]:
                text += f"‚Ä¢ {group_emoji(MuscleGroup(group))} {group_name(MuscleGroup(group))}: {count} —Ä–∞–∑\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        builder = InlineKeyboardBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        # builder.row(InlineKeyboardButton(
        #     text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        #     callback_data="detailed_workout_stats"
        # ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="workout_menu"))
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
    
    await callback.answer()


async def get_user(session: AsyncSession, telegram_id: int) -> User:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
    """
    result = await session.execute(select(User).where(User.telegram_id == telegram_id))
    user = result.scalar_one_or_none()
    return user


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω –≥—Ä—É–ø–ø –º—ã—à—Ü –∏ —Ç–∏–ø–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è

def group_emoji(muscle_group: MuscleGroup) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã –º—ã—à—Ü
    """
    emoji_map = {
        MuscleGroup.CHEST: "üí™",
        MuscleGroup.BACK: "üîô",
        MuscleGroup.LEGS: "ü¶µ",
        MuscleGroup.SHOULDERS: "üîÑ",
        MuscleGroup.BICEPS: "üí™",
        MuscleGroup.TRICEPS: "üí™",
        MuscleGroup.ABS: "üß†",
        MuscleGroup.CALVES: "ü¶µ",
        MuscleGroup.FOREARMS: "üí™",
        MuscleGroup.FULL_BODY: "üèãÔ∏è‚Äç‚ôÇÔ∏è",
    }
    return emoji_map.get(muscle_group, "‚ùì")


def group_name(muscle_group: MuscleGroup) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    """
    name_map = {
        MuscleGroup.CHEST: "–ì—Ä—É–¥–Ω—ã–µ",
        MuscleGroup.BACK: "–°–ø–∏–Ω–∞",
        MuscleGroup.LEGS: "–ù–æ–≥–∏",
        MuscleGroup.SHOULDERS: "–ü–ª–µ—á–∏",
        MuscleGroup.BICEPS: "–ë–∏—Ü–µ–ø—Å",
        MuscleGroup.TRICEPS: "–¢—Ä–∏—Ü–µ–ø—Å",
        MuscleGroup.ABS: "–ü—Ä–µ—Å—Å",
        MuscleGroup.CALVES: "–ò–∫—Ä—ã",
        MuscleGroup.FOREARMS: "–ü—Ä–µ–¥–ø–ª–µ—á—å—è",
        MuscleGroup.FULL_BODY: "–í—Å–µ —Ç–µ–ª–æ",
    }
    return name_map.get(muscle_group, str(muscle_group))


def equipment_name(equipment: Equipment) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    """
    name_map = {
        Equipment.NONE: "–ë–µ–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
        Equipment.DUMBBELLS: "–ì–∞–Ω—Ç–µ–ª–∏",
        Equipment.BARBELL: "–®—Ç–∞–Ω–≥–∞",
        Equipment.KETTLEBELL: "–ì–∏—Ä—è",
        Equipment.CABLE: "–¢—Ä–æ—Å",
        Equipment.MACHINE: "–¢—Ä–µ–Ω–∞–∂–µ—Ä",
        Equipment.BANDS: "–†–µ–∑–∏–Ω–æ–≤—ã–µ –ª–µ–Ω—Ç—ã",
    }
    return name_map.get(equipment, str(equipment))
